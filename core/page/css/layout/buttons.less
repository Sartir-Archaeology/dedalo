// buttons



// fn_add_mask . buttons with icons
	.fn_add_mask(@icon_name) {
		-webkit-mask-image: url('@{images_base_path}/icons/@{icon_name}');
				mask-image: url('@{images_base_path}/icons/@{icon_name}');
		-webkit-mask-size: contain;
				mask-size: contain;
		-webkit-mask-repeat: no-repeat;
				mask-repeat: no-repeat;
		-webkit-mask-position: center;
				mask-position: center;
	}



// fn_build_button
	.fn_build_button(@icon_name, @color:black, @opacity:0.7, @size:1em) {

		// create base standard button
		.button;

		// custom icon color
		background: @color;

		// custom size overwrite
		height: @size;
		width: @size;

		// custom size overwrite
		opacity: @opacity;

		// custom icon svg name
		.fn_add_mask(@icon_name);
	}



// fn_append_icon (used by tag element 'button')
	.fn_append_icon(@icon_name, @color:#3f3f3f, @opacity:1) {

		&:before {
			background-color: @color;
			content: ' ';
			display: inline-block;
			height: 1em;
			margin-right: 0.25em;
			opacity: @opacity;
			vertical-align: baseline;
			width: 1em;
			.fn_add_mask(@icon_name);

			@media screen and (max-width: @width_break_point_1) {
				margin-right: 0px;
			}
		}
	}



// button : generic to apply to span elements and get a icon button without text
	.button { // @icon_name:null, @color:black, @opacity:0.7, @size:1em
		background-color: #000000;
		cursor: pointer;
		// display: inline-block;
		display: inline-flex;
		height: 1em;
		line-height: 1em;
		margin: 0px;
		margin-left: 0.25rem;
		margin-right: 0.25rem;
		min-width: 1em;
		opacity: 1;
		user-select: none;
		// vertical-align: middle;
		width: 1em;

		// height: fit-content;
		// margin-top: 0.25rem;
		// margin-left: 0.5em;
		// margin-right: 0.5em;
		// background-repeat: no-repeat;
		// background-position: center;
		// background-size: contain;
		//padding: 0.5em;
		// margin-top: 0.25em;
		// margin-bottom: 0.25em;

		&:hover {
			opacity: 1 !important;
		}
		&:active {
			opacity: 0.4 !important;
		}

	// inside buttons_container, all buttons are white
		.buttons_container & {
			background-color: #ffffff;
			margin-top: 0px;
		}
	// variants after create button
		&.white {
			background-color: #ffffff !important;
		}
		&.grey {
			background-color: #949494;
			opacity: 0.5;
		}
	}//end .button



// button tag. explicit buttons (dialog box etc.)
	button {
		// appearance: none;
		// font-size: .9em;
		// background-color: #a6a6a6;
		// border-radius: 0.30em;
		// color: #ffff;
		// border: none;
		height: min-content;
		margin-right: 0.25em;
		padding-bottom: 0.275rem;
		padding-left: 0.75rem;
		padding-right: 0.75rem;
		padding-top: 0.275rem;
		width: max-content;

		// bootstrap
		// display: inline-block;

		text-align: center;
		vertical-align: middle;
		cursor: pointer;
		-webkit-user-select: none;
		-moz-user-select: none;
		-ms-user-select: none;
		user-select: none;
		background-color: transparent;
		border: 1px solid transparent;
		// padding: .375rem .75rem;
		font-size: 1rem;
		font-weight: 400;
		line-height: 1.5;
		border-radius: 0.25rem;
		transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

		display: inline-flex;
		align-items: center;
		justify-content: center;

		&.folding {
			@media screen and (max-width: @width_break_point_1) {
				// padding-right: 0.25rem;
				text-indent: -9999em;
			}
		}
		// @media screen and (max-width: @width_break_point_1) {
		// 	// padding-right: 0.25rem;
		// 	text-indent: -9999em;
		// }

		// color
		color: #212529; // default dark grey

		&.primary {
			@color: @color_primary;
			background-color: @color;
			border-color: darken(@color, 2%);
			color: #ffffff;
			&:before {
				background-color: #ffffff !important;
			}
			&:hover {
				background-color: darken(@color, 5%);
				border-color: darken(@color, 7%);
			}
		}
		&.secondary {
			@color: @color_secondary;
			background-color: @color;
			border-color: darken(@color, 2%);
			color: #ffffff;
			&:before {
				background-color: #ffffff !important;
			}
			&:hover {
				background-color: darken(@color, 5%);
				border-color: darken(@color, 7%);
			}
		}
		&.success {
			@color: @color_success;
			background-color: @color;
			border-color: darken(@color, 2%);
			color: #ffffff;
			&:before {
				background-color: #ffffff !important;
			}
			&:hover {
				background-color: darken(@color, 5%);
				border-color: darken(@color, 7%);
			}
		}
		&.danger {
			@color: @color_danger;
			background-color: @color;
			border-color: darken(@color, 2%);
			color: #ffffff;
			&:before {
				background-color: #ffffff !important;
			}
			&:hover {
				background-color: darken(@color, 5%);
				border-color: darken(@color, 7%);
			}
		}
		&.warning {
			@color: @color_orange_dedalo;
			background-color: @color;
			border-color: darken(@color, 2%);
			color: #ffffff;
			&:before {
				background-color: #ffffff !important;
			}
			&:hover {
				background-color: darken(@color, 5%);
				border-color: darken(@color, 7%);
			}
		}
		&.info {
			@color: @color_info;
			background-color: @color;
			border-color: darken(@color, 2%);
			color: #ffffff;
			&:before {
				background-color: #ffffff !important;
			}
			&:hover {
				background-color: darken(@color, 5%);
				border-color: darken(@color, 7%);
			}
		}
		&.light {
			@color: @color_light;
			background-color: @color;
			border-color: darken(@color, 2%);
			color: #212529;
			&:before {
				background-color: #212529 !important;
			}
			&:hover {
				background-color: darken(@color, 5%);
				border-color: darken(@color, 7%);
			}
		}
		&.dark {
			@color: @color_dark;
			background-color: @color;
			border-color: darken(@color, 2%);
			color: #ffffff;
			&:before {
				background-color: #ffffff !important;
			}
			&:hover {
				background-color: darken(@color, 5%);
				border-color: darken(@color, 7%);
			}
		}
		&.link {
			// no background for link button
			color: @color_primary;
			font-weight: 400;
			text-decoration: none;
		}

		// bg means the button have a custom background image
		// &.bg {
		// 	background-repeat: no-repeat;
		// 	background-size: contain;
		// 	background-position: -1.5em 0;
		// 	background-origin: content-box;
		// 	padding-left: 2em !important;
		// }



		&:active {
			opacity: 0.5;
		}
	}



// generic recyclable icons for buttons
	.delete {
		@icon_name : 'trash.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.delete_light {
		@icon_name : 'delete.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.delete_bold {
		@icon_name : 'trash_bold.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.remove {
		@icon_name : 'trash.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.add, .new {
		@icon_name : 'add.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.duplicate {
		@icon_name : 'duplicate.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.edit {
		@icon_name : 'icon_edit.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.pen {
		@icon_name : 'pen.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.reset {
		@icon_name : 'eraser.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.align_justify {
		@icon_name : 'justify.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.search {
		@icon_name : 'find.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.email {
		@icon_name : 'email.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.email_multiple {
		@icon_name : 'email_multiple.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.close {
		@icon_name : 'close.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.link {
		@icon_name : 'link.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.arrow_link {
		@icon_name : 'arrow_link.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.calendar {
		@icon_name : 'calendar.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.upload {
		@icon_name : 'upload.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.download {
		@icon_name : 'download.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.find {
		@icon_name : 'find.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.save {
		@icon_name : 'save.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.eye {
		@icon_name : 'eye.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.full_screen {
		@icon_name : 'full_screen.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.label {
		@icon_name : 'label.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.compress {
		@icon_name : 'compress.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.gear {
		@icon_name : 'gear.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.reload {
		@icon_name : 'reload.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.sync {
		@icon_name : 'sync.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.cancel {
		@icon_name : 'cancel.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.table {
		@icon_name : 'table.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.info {
		@icon_name : 'info.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.csv {
		@icon_name : 'csv.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.file_av {
		@icon_name : 'file_av.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.media {
		@icon_name : 'media.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.rotate {
		@icon_name : 'rotate.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
		&.right {
			transform: scaleX(-1);
		}
	}
	.repair {
		@icon_name : 'repair.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.pause {
		@icon_name : 'pause.svg';
		button&  { .fn_append_icon(@icon_name);}
		.button& { .fn_add_mask(@icon_name); }
	}
	.play {
		@icon_name : 'play.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.list {
		@icon_name : 'list.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.lang {
		@icon_name : 'lang.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	// history (time_machine recover icon)
	.history {
		@icon_name : 'history.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.drag {
		@icon_name : 'drag.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.geo {
		@icon_name : 'geo.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}
	.note {
		@icon_name : 'note.svg';
		button&  { .fn_append_icon(@icon_name); }
		.button& { .fn_add_mask(@icon_name); }
	}


// .contenteditable_buttons (used by content editable)
	.contenteditable_buttons {
		// position: absolute;
		// height: 1.5em;
		// top: -1.54em;
		// z-index: 9;
		display: flex;
		// background-color: @color_grey_dark;
		padding: 0px;
		border-top-left-radius: 0.25em;
		border-top-right-radius: 0.25em;

		>.button {
			color: white;

			&:before {
				content: ' ';
				background-size: contain;
				background-repeat: no-repeat;
				height: 1em;
				width: 1em;
				margin-right: 0.25em;
				padding-right: 1em;
				vertical-align: text-bottom;
			}

			&.bold:before {
				//background-image: url(../../themes/default/icons/bold.svg);
				// .background_icon('bold.svg');
				.fn_build_button('bold.svg', black, 1);
			}
			&.italic:before {
				//background-image: url(../../themes/default/icons/italic.svg);
				// .background_icon('italic.svg');
				.fn_build_button('italic.svg', black, 1);
			}
			&.underline:before {
				//background-image: url(../../themes/default/icons/underline.svg);
				// .background_icon('underline.svg');
				.fn_build_button('underline.svg', black, 1);
			}
			&.replace:before {
				//background-image: url(../../themes/default/icons/exchange.svg);
				// .background_icon('exchange.svg');
				.fn_build_button('exchange.svg', black, 1);
			}
		}
	}//end .contenteditable_buttons
