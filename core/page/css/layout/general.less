/**
* general
*
* Common general styles used by components, page, services, section, etc.
*
* Included from main.less file
*/

// page general
	html {
		// global_font. Defined in fonts.less
		.global_font;
		color: @color_grey_ultradark;

		// font size. Note that default browser font size is 16px
		font-size: 0.8125rem;

		@media screen and (max-width: @width_break_point_0) {
			font-size: 0.94rem;
			line-height: 1.2rem;
		}
	}

	b,
	strong {
		font-weight: bold;
	}

	i, em {
		font-style: italic;
	}

	danger {
		color: @color_danger;
		font-weight: bold;
	}

	h2 {
		font-size: 1.5rem;
	}

	h3 {
		font-size: 1.25rem;
	}

	code {
		color: #9fa5ad;
		font-size: 1.3rem;
		display: block;
		padding: 1rem;
		background-color: @color_grey_dark_2;
		font-weight: 200;
		font-family: 'Menlo', monospace;
		border-radius: 3px;
		white-space: pre-line;
		padding: 1rem !important;
		padding-top: 0px !important;
		line-height: 1.5rem;
	}

	section {
		font-size: 1em;
	}

// basic page styles
	.loading {
		opacity: 0.4;
		pointer-events: none !important;
		-webkit-user-select: none !important;
		-khtml-user-select: none !important;
		-moz-user-select: none !important;
		-o-user-select: none !important;
		user-select: none !important;
		animation-play-state: paused;
		cursor: wait;
	}
	.hide {
		display: none !important;
	}
	.invisible {
		visibility: hidden !important;
		opacity: 0 !important;
		height: 0 !important;
		width: 0 !important;
		padding: 0!important;
		margin: 0!important;
	}

// #main
	#main {
		width: 100%;
		min-height: calc(100vh - 5rem);
	}

// maintenance_container
	.maintenance_container {
		padding: 1.5rem;
		background-color: @color_orange_dedalo;
		color: @color_white;
		font-size: 1.5rem;
		text-align: center;
		box-shadow: inset 0px -1px 0 #d6d6d6;
	}

// notification_container
	.notification_container {
		padding: 1rem;
		background-color: darken(@color_danger, 10%);
		color: @color_white;
		font-size: 1.2rem;
		text-align: center;
		z-index: 5;
		position: relative;
	}

// general styles
	.mark {
		font-style: italic;
	}

	[hidden] {
		display: none;
	}

	.unselectable, .text_unselectable {
		-khtml-user-select	: none !important;
		-moz-user-select	: none !important;
		-o-user-select		: none !important;
		-webkit-user-select	: none !important;
		user-select			: none !important;
	}

	.noevents {
		-khtml-user-select	: none !important;
		-moz-user-select	: none !important;
		-o-user-select		: none !important;
		-webkit-user-select	: none !important;
		user-select			: none !important;
	}

	// lock
	.lock {
		opacity: 0.6;
		pointer-events: none !important;
		position: relative;

		// lock icon at top right
		&:after {
			content: " ";
			.fn_build_button('lock.svg', @color_danger, 1);
			position: absolute;
			top: 4px;
			right: 4px;
			opacity: 0.5;
		}
	}

	.no_margin {
		margin: 0px !important;;
	}

	.no_visible {
		visibility: hidden;
		pointer-events: none;
	}

	// centered
	.centered {
		left: 50%;
		position: fixed;
		top: 50%;
		transform: translate(-50%, -50%);
	}

	.bold {
		font-weight: bold;
	}

	.clickable {
		cursor: pointer !important;
	}

	.blink {
		-webkit-animation: blink-animation 1s steps(5, start) infinite;
		animation: blink-animation 1s steps(5, start) infinite;
	}
	@keyframes blink-animation {
	  to {
		visibility: hidden;
	  }
	}
	@-webkit-keyframes blink-animation {
	  to {
		visibility: hidden;
	  }
	}

	.spinner {

		// position
		position: absolute;
		left: 40%;
		top: 40%;

		// size
		height: 3rem;
		width: 3rem;

		// Create a curve at the top
		border-radius: 50%;
		border: 4px solid @color_grey_medium_1;
		border-top-color: @color_orange_dedalo;

		&.medium {
			height: 2rem;
			width: 2rem;
			border: 3px solid @color_grey_medium_1;
			border-top-color: @color_orange_dedalo;
		}

		&.small {
			height: 1.5rem;
			width: 1.5rem;
			border: 2px solid @color_grey_medium_1;
			border-top-color: @color_orange_dedalo;
		}

		animation: run_spinner 800ms linear infinite;
	}
	@keyframes run_spinner {
		from {
			transform: rotate(0deg);
		}
		to {
			transform: rotate(360deg);
		}
	}

	// fade out animation
	.fade-out {
		--speed: 1s;
		animation: anim_fade_out var(--speed);
		-webkit-animation: anim_fade_out var(--speed);
		-moz-animation: anim_fade_out var(--speed);
	}
	// Animate opacity
	@keyframes anim_fade_out {
		from { opacity: 1 }
		to { opacity: 0 }
	}
	@-moz-keyframes anim_fade_out {
		from { opacity: 1 }
		to { opacity: 0 }
	}
	@-webkit-keyframes anim_fade_out {
		from { opacity: 1 }
		to { opacity: 0 }
	}

	// fade in animation
	.fade-in {
		--speed: 1s;
		animation: anim_fade_in var(--speed);
		-webkit-animation: anim_fade_in var(--speed);
		-moz-animation: anim_fade_in var(--speed);
	}
	.fade-in-fast {
		--speed: 0.25s;
		animation: anim_fade_in var(--speed);
		-webkit-animation: anim_fade_in var(--speed);
		-moz-animation: anim_fade_in var(--speed);
	}
	// Animate opacity
	@keyframes anim_fade_in {
		from { opacity: 0 }
		to { opacity: 1 }
	}
	@-moz-keyframes anim_fade_in {
		from { opacity: 0 }
		to { opacity: 1 }
	}
	@-webkit-keyframes anim_fade_in {
		from { opacity: 0 }
		to { opacity: 1 }
	}

	.no_access {
		display: inline-block;
		padding: 0.5rem;
	}

	.fn_date_format() {
		letter-spacing: 0.05em;
		font-family: "date_separator", apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
	}

	// separator (used by portals and autocompletes as ' | ')
	.separator {
		margin-left: 0.2rem;
		margin-right: 0.2rem;
		color: @color_grey_medium_2;
	}

// icon_arrow
// Used in section groups, inspector blocks, area_development widgets...
	.icon_arrow {
		padding: 0.33rem;
		padding-right: 1.33rem;
		position: relative;

		&:after {
			.fn_add_mask('arrow_down.svg');
			background-color: @color_grey_dark;
			content: ' ';
			cursor: pointer;
			height: 1em;
			margin-right: 0.33rem;
			padding: 0.33rem;
			position: absolute;
			right: 0px;
			transition: transform 0.26s ease-out;
			width: 1em;
		}

		&.up {
			&:after {
				transform: rotate(180deg);
			}
		}

		&:active {
			opacity: 0.5;
		}
	}//end .icon_arrow



// component label span warning add
	.warning_label_text {
		color: @color_danger;
		font-weight: bold;
		margin-left: 1rem;
	}


// nowrap on flex
	.nowrap {
		flex-flow: nowrap !important;
		flex-wrap: nowrap !important;
	}



// general definition of html input/form elements
// If you need to build a variant, apply 'reset_input' class
	input[type='text'], input[type='number'], input[type='url'], input[type='password'], button[type='submit'], textarea, select, .contenteditable {

		li & {
			max-width: 100%;
			outline: 1px solid @color_grey_light;
			outline-offset: 0;
		}
		font-size: 1em;
		height: 2.0em;
		width: 100%;
		margin-right: 0.5em;
		border: none;
		outline: 1px solid @color_grey_light;
		will-change: auto; // @see https://developer.mozilla.org/en-US/docs/Web/CSS/will-change
		transition: all 0.5s ease, padding 0s;
		opacity: 0.75;
		padding: 0px;
		padding-left: 0.5em;
		padding-right: 1.5rem;

		// on focus inputs, adds a soft shadow and outline
		&:focus {
			.hilite_mixin;
		}
	}

	select {
		width: auto;
		// removes browser appearance style
		background: url('../../themes/default/icons/select_arrows.svg');
		background-color: @color_grey_ultralight;
		background-repeat: no-repeat;
		background-position: 97%;
		background-size: 1rem;
		-moz-appearance: none;
		-webkit-appearance: none;
		appearance: none;
		padding-left: 1em;
		opacity: 0.7;

		li & {
			margin-right: 0.5em;
		}
	}

	input[type='radio'] {
		font-size: 1em;
	}

// .reset_input Restore default appearance of html input/form elements
	.reset_input {
		&,input[type='text'], &,input[type='number'], &,input[type='url'], &,input[type='password'], &,button[type='submit'], &,textarea, &,select, &.contenteditable {

			li & {
				width: unset;
				outline: unset;
				outline-offset: unset;
			}

			font-size: unset;
			height: unset;
			width: unset;
			margin-right: unset;
			border: unset;
			outline: unset;
			transition: unset;
			opacity: unset;
			padding: unset;
			padding-left: unset;
			padding-right: unset;

			// on focus inputs, adds a soft shadow and outline
			&:focus {
				outline-offset: unset;
				outline: unset;
				box-shadow: unset;
				opacity: unset;
				z-index: unset;

				&.input_value {
					padding-right: unset;
				}
			}
		}
		&,select {
			li & {
				margin-right: unset;
			}
		}
		&,input[type='radio'] {
			font-size: unset;
		}
	}//end .reset_input

// error
	// used as background red color in inspector and components when an error
	// occurs, like network problems, etc.
	.error {
		background-color: @color_danger !important;
		transition: background-color 0.3s ease;
		color: @color_white;
	}
	.error_alert {
		.error;
		// add icon :before
		.fn_append_icon('alert.svg', @color_white, 1);
		&:before {
			margin-right: 0.75rem;
		}
		display: flex;
		padding: 1rem;
		border-radius: 3px;
	}
	.error_text {
		color: @color_danger;
	}

	.alert {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		width: 100%;
		height: min-content;
		margin-right: 0.25em;
		padding: 0.275rem;
		padding-left: 1rem;
		padding-right: 1rem;
		text-align: center;
		vertical-align: middle;
		word-wrap: break-word;
		-webkit-user-select: none;
		-moz-user-select: none;
		-ms-user-select: none;
		user-select: none;
		background-color: transparent;
		border: 1px solid transparent;
		border-radius: 0.25rem;
		font-size: 1rem;
		font-weight: 400;
		line-height: 1.5;
		transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

		&.danger {
			background-color: @color_danger;
			border-color: @color_danger;
			color: @color_white;
			&:before {
				background-color: @color_white !important;
			}
		}
		&.success {
			background-color: @color_success;
			border-color: @color_success;
			color: @color_white;
			&:before {
				background-color: @color_white !important;
			}
		}
	}

// warning
	.warning_text {
		background-color: @color_orange_dedalo !important;
		transition: background-color 0.3s ease;
		color: @color_white;
	}

// success
	.success_text {
		color: @color_success;
	}
	.save_success {
		position: relative;

		&:before {
			border-top: 3px solid @color_green_success;
			content: ' ';
			display: block;
			position: absolute;
			left: 0px;
			top: 1px;
			width: 0px;
			opacity: 0;
			z-index: 4;
			animation: success_animation_line 0.6s ease-out;
		}
	}
	@keyframes success_animation_line {
		0%  { width: 1%;   opacity: 0.5; }
		22% { width: 100%; opacity: 1; }
		60% { width: 100%; opacity: 1; }
		100% { width: 100%; opacity: 0; }
	}

// hidden
	.hidden {
		visibility: hidden;
	}
// display_none
	.display_none {
		display: none !important;
	}

// saving. component saving lock pointer events
	.saving {
		pointer-events: none;
	}

// debug
	.debug {
		padding: 1em;
		word-break: break-word;
		white-space: pre-line;
		line-height: 1.1rem;

		.debug_container {
			background-color: @color_grey_light;
			display: grid;
			grid-template-columns: 1fr 1fr 1fr;
			padding: 0px;
			overflow: auto;
			@media screen and (max-width: @width_break_point_0) {
				display: block;
				width: 100%;
			}
		}

		pre {
			z-index: 0;
			outline: 1px solid #cad0d4;
			overflow-wrap: anywhere;
		}

		.total_time {
			position: fixed;
			right: 2em;
			top: 1em;
		}
	}

	.developer_info {
		font-size: 95%;
		opacity: 0.5;
	}

// note
	.note {
		font-size: 75%;
		vertical-align: bottom;
	}

// link
	.link {
		cursor: pointer;
		&:active {
			opacity: 0.6;
		}
	}

// container_placeholder. Used lo show message 'Loading ...' until element rendered node is ready
	.container_placeholder {
		padding: 1rem;
		position: relative;
		padding-left: 3.5rem !important;

		>.spinner {
			left: 0.75rem;
			top: 0.5rem;
			z-index: 2;
			margin: 0px;
			min-height: unset;
		}
	}

// component specific
	.css_email_error {
		background-color: @color_danger;

		&:hover {
			background-color: @color_orange_dedalo;
		}
	}

// no_records
	.no_records {
		color: @color_orange_dedalo;
		font-size: 1em;
		padding: 1em;
		width: 100%;
		white-space: pre;
	}

// tool tip
	.tooltip_toggle {
		position: relative;

		.hidden_tooltip {
			opacity: 0;
			visibility: hidden;
		}

		.tooltip {
			transition: all 0.5s ease;
			position: absolute;
			top: calc(100% + 1em);
			right: 1em;
			z-index: 4;
			background-color: rgba(0, 0, 0, 0.9);
			color: @color_white;
			padding: 1em;
			line-height: 1.5em;
			border-radius: 5px;
			font-size: 0.8em;
			width: 100%;
			max-width: 20em;

			>.search_options_title_item {
				display: grid;
				grid-template-columns: 1fr 3fr;

				>span:first-of-type {
					text-align: center;
					font-weight: bold;
				}
			}

			&:after {
				position: absolute;
				bottom: 100%;
				left: 50%;
				border: solid transparent;
				content: ' ';
				height: 0px;
				width: 0px;
				pointer-events: none;
				border-bottom-color: rgba(0, 0, 0, 0.8);
				border-width: 10px;
				margin-left: -10px;
			}
		}

		&:hover .tooltip {
			transition-delay: 1s; // delay show after hover component wrapper
			opacity: 1;
			visibility: visible;
		}

	}//end .tooltip_toggle


/* mandatory common
------------------------------------------------------- */
	.wrapper_component .mandatory {
		background-color: rgba(255, 0, 0, 0.11);
		border: 1px solid @color_danger;
	}
