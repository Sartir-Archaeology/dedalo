<?php

	# VISUALIZADOR HTML

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'in');
	
	print "<div class=\"wrap_component css_wrap_autocomplete_ts wrap_component_{$tipo}\" id=\"{$id_wrapper}\"
	data-tipo=\"{$tipo}\"
	data-lang=\"{$lang}\"
	data-section_tipo=\"{$section_tipo}\"
	data-parent=\"{$parent}\"
	data-modo=\"{$modo}\"
	data-from_modo=\"{$from_modo}\"
	data-dato='{$dato_json}'
	data-component_name=\"{$component_name}\"
	data-component_info='{$component_info}'
	>";

	# ETIQUETA (LABEL)
	$html_label = component_common_draw::draw_label($this);

	# CONTENIDO (INPUT)
	$html_contenido = '';
	switch($permissions) {

		case 0	:	$html_contenido .= "";
					break;

		case 1	: 	$html_contenido .= $valor;
					break;

		case 2	:
		case 3	:
				if($from_modo !== 'edit'){
					$html_contenido .= "<div class=\"css_autocomplete_ts_button_close\" onclick=\"component_common.change_mode_component(this, 'edit', '$from_modo')\"></div>";
				}
				

				#
				# VALOR . STRING RESOLVED TO SHOW
				$html_contenido .= "\n <ul class=\"css_autocomplete_ts_valor\">";
				foreach ($ar_valor as $current_value => $value) {

					$html_contenido .= "<li>";

					# BTN DELETE
					$html_contenido .= "\n <div class=\"icon_bs link css_autocomplete_ts_button_delete edit_hidden\"
					data-tipo=\"{$tipo}\"
					data-current_value='$current_value'
					data-role=\"autocomplete_ts_button_delete\"
					title=\"$label $parent\"
					onclick=\"component_autocomplete_ts.delete(this)\"></div>";

					$html_contenido .= $value;
					if(SHOW_DEBUG) {
						#$html_contenido .= " <span class=\"notes\">$current_value</span>";
					}

					$html_contenido .= "</li>";
				}
				$html_contenido .= "</ul>";


				# SOURCE_MODE SWITCH
				switch ($source_mode) {
					case 'tree':
						# BTN NEW ELEMENT
						$html_contenido .= "<div class=\"icon_bs link new_autocomplete_ts\"
						data-id_wrapper=\"$id_wrapper\"
						data-hide_types='{$ar_referenced_tipo_json}'
						data-source_mode=\"$source_mode\"
						onclick=\"component_autocomplete_ts.open_ts_window(this)\"></div>";

						/*
						data-termino_id=\"$ds_terminoID\"
						data-locator_section_tipo=\"{$current_locator->section_tipo}\"
						data-locator_section_id=\"{$current_locator->section_id}\"
						data-ds_key=\"{$ds_key}\"
						data-semantic_wrapper_id=\"{$semantic_wrapper_id}\"
						*/
						break;
					
					default:
						#
						# INPUT SEARCH FIELD
						$html_contenido .= "\n <input class=\"css_autocomplete_ts_search_field edit_hidden\" type=\"text\" placeholder=\"".label::get_label('buscar')."...\"
						data-id_wrapper=\"$id_wrapper\"
						data-ar_tipo_to_search='{$ar_referenced_tipo_json}'
						data-source_mode=\"$source_mode\"
						onfocus=\"component_autocomplete_ts.activate(this)\"
						tabindex=\"1\"
						autocomplete=\"off\"
						autocorrect=\"off\"
						/>";

						if(SHOW_DEBUG) {
							$html_contenido .= "<div class=\"debug_info notes\">ar_referenced_tipo: ".implode(', ', $ar_referenced_tipo)."</div>";
							$html_contenido .= "<div class=\"debug_info notes\">".str_replace('},', '},<br>', $dato_json) ."</div>";
						}
						break;
				}//end switch ($source_mode)


				#
				# TREE RESOLUTION STATS
				#$html_contenido .= "\n <div id=\"autocomplete_ts_tree_stats_{$tipo}\" class=\"css_autocomplete_ts_tree_stats\"> Calculating.. </div>";

				# INPUT DATA HIDDEN
				$html_contenido .= "\n<input type=\"text\" name=\"{$input_name}\" class=\"css_autocomplete_ts_dato_hidden\" style=\"width:300px;\"
				data-tipo=\"{$tipo}\"
				data-section_tipo=\"{$section_tipo}\"
				data-parent=\"{$parent}\"
				data-lang=\"{$lang}\"
				data-ar_tipo_to_search='{$ar_referenced_tipo_json}'
				data-link_fields='{$ar_link_fields}'
				data-role=\"autocomplete_ts_dato_hidden\"
				value='{$dato_json}'
				title='$ar_referenced_tipo_json'				
				/>";

				if(SHOW_DEBUG) {
					#$html_contenido .= "\n <span class=\"css_span_debugger\" id=\"debugger_{$parent}\" >{$debugger}</span>";
				}
				break;
	}

	# Prepare content to show in page
	tools::prepare_content($html_contenido);


	# PRINT HTML
	print $html_label;
	print $html_contenido;



	print "</div>"; //wrap


	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'out');



?>