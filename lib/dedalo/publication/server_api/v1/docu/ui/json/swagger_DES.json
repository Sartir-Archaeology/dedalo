{
  "openapi" : "3.0.0",
  "servers" : [ {
    "url" : "http://dedalo4.antropolis.net/dedalo/lib/dedalo/publication/server_api/v1/json"
  }, {
    "url" : "https://dedalo4.antropolis.net/dedalo/lib/dedalo/publication/server_api/v1/json"
  } ],
  "info" : {
    "version" : "1.0.6-oas3",
    "title" : "Dédalo Web REST API",
    "description" : "Builds Public Dédalo data for publication. <br>Use this online tool to test your data and remember always write your <i>Auth code</i> when executes a try call.<br> <strong>This API is focused to Oral History archives and is for general pourposes.<br>If you need special features or custom results, you are wellcome to join API develop team contacting with the source developers (aka Alex&Paco)</strong> in webmaster@render.es",
    "license" : {
      "name" : "Apache 2.0 license",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "contact" : {
      "name" : "Aditional Dédalo publication info",
      "url" : "http://dedalo4.antropolis.net/dedalo/lib/dedalo/publication/server_api/v1/docu/API_docu_v1.pdf"
    }
  },
  "tags" : [ {
    "name" : "Info",
    "description" : "Informative calls"
  }, {
    "name" : "Records",
    "description" : "Generic data get functions"
  }, {
    "name" : "Thesaurus",
    "description" : "Specific hierarchy and thesaurus functions"
  }, {
    "name" : "Free",
    "description" : "Search functions in transcription text"
  }, {
    "name" : "Video view",
    "description" : "Utils for get video player general data"
  }, {
    "name" : "Global",
    "description" : "Search in all data functions"
  } ],
  "paths" : {
    "/tables_info" : {
      "get" : {
        "summary" : "Info about tables schema",
        "description" : "Get complete info about current disposable tables and columns.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        } ],
        "tags" : [ "Info" ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/table_list"
                }
              }
            }
          }
        }
      }
    },
    "/records" : {
      "post" : {
        "description" : "Search records with current params in requested table.",
        "summary" : "Get records from DDBB",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "name" : "table",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "interview"
          }
        }, {
          "$ref" : "#/components/parameters/ar_fields"
        }, {
          "name" : "section_id",
          "in" : "query",
          "description" : "Filter by specific section_id. Like 1",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "integer"
          }
        }, {
          "name" : "sql_fullselect",
          "in" : "query",
          "description" : "Custom sql select for builds query. Replaces any other columns selection option",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sql_filter",
          "in" : "query",
          "description" : "Custom query added to standar filter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "Custom order for result.Set null for no sort",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximun records returned in query. 0 for no limit",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "int",
            "default" : 10
          }
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "Custom group query for sql like 'lang'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Custom records offset for query",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "int"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Activates total records counter for pagination",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "format" : "bool"
          }
        }, {
          "name" : "resolve_portal",
          "in" : "query",
          "description" : "Activates automatic resolution of portals option. Default is false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "format" : "bool"
          }
        }, {
          "name" : "resolve_portals_custom",
          "in" : "query",
          "description" : "Resolve requested portals only. Use json map object like '{\"audiovisual\":\"audiovisual\",\"informant\":\"informant\"}' where key is column name and value is target table",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "map",
          "in" : "query",
          "description" : "json representation of array ob objects like [{\"table\": \"informant\",\"field\":birthplace_id\",\"function\":\"resolve_geolocation\",\"output_field\":\"birthplace_obj\"}] Default is false",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "tags" : [ "Records" ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/result"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/reel_terms" : {
      "post" : {
        "summary" : "Get reel indexed terms",
        "description" : "Resolve all terms used in the indexation of the given reel transcription (audiovisual record).",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "av_section_id",
          "in" : "query",
          "description" : "audiovisual section id (one or various separated by comma)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Thesaurus" ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/result"
                }
              }
            }
          }
        }
      }
    },
    "/fragment_from_index_locator" : {
      "post" : {
        "summary" : "Build fragment of text and video from a index locator",
        "description" : "Calculate all fragments indexed with this locator.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "index_locator",
          "in" : "query",
          "description" : "locator object encoded as json like {\"section_tipo\":\"rsc167\",\"section_id\":\"1\",\"tag_id\":\"1\"}",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "{\"section_tipo\":\"rsc167\",\"section_id\":\"1\",\"tag_id\":\"1\"}"
          }
        } ],
        "tags" : [ "Thesaurus" ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/result"
                }
              }
            }
          }
        }
      }
    },
    "/thesaurus_root_list" : {
      "post" : {
        "summary" : "Get first level of terms from thesaurus",
        "description" : "Return a array of 'ts_term' objects with resolved data. You can use only the data or (in PHP) manage 'ts_term' objects to build custom html.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "table",
          "in" : "query",
          "description" : "Optional comma separated names of thesaurus tables. If undefined, server config thesaurus tables are used",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "parents",
          "in" : "query",
          "description" : "Optional comma separated parents used as roots like 'hierarchy1_245,hierarchy1_253'. If defined, override default behaviour (from first elements of table like 'ts1_1)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "exclude_tld",
          "in" : "query",
          "description" : "Optional comma separated list of tld to exclude like 'xx,rt'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "tags" : [ "Thesaurus" ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Array of records",
                  "type" : "array",
                  "items" : {
                    "title" : "Records info",
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "type" : "string"
                      },
                      "single" : {
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/thesaurus_random_term" : {
      "post" : {
        "summary" : "A random thesaurus term name",
        "description" : "Return a random term from thesaurus tables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "table",
          "in" : "query",
          "description" : "Optional comma separated names of thesaurus tables. If undefined, server config thesaurus tables are used",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "exclude_tld",
          "in" : "query",
          "description" : "Optional comma separated list of tld to exclude like 'xx,rt'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "tags" : [ "Thesaurus" ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Array of records",
                  "type" : "array",
                  "items" : {
                    "title" : "Records info",
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "type" : "string"
                      },
                      "single" : {
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/thesaurus_search" : {
      "post" : {
        "summary" : "Search into thesaurus term",
        "description" : "Execute a search against thesaurus tables",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "table",
          "in" : "query",
          "description" : "Optional comma separated names of thesaurus tables. If undefined, server config thesaurus tables are used",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "exclude_tld",
          "in" : "query",
          "description" : "Optional comma separated list of tld to exclude like 'xx,rt'",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "string to search in database. Minimun 3 chars for full text search",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "term"
          }
        }, {
          "name" : "rows_per_page",
          "in" : "query",
          "description" : "Pagination preference. One row per page is the default value",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int"
          }
        }, {
          "name" : "page_number",
          "in" : "query",
          "description" : "Pagination preference. Current page number. One is default",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int"
          }
        }, {
          "name" : "tree_root",
          "in" : "query",
          "description" : "Defines first element from build the hierarchy tree when show the reults. Accepted values first_parent | last_parent . Default is last_parent",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "tags" : [ "Thesaurus" ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Array of records",
                  "type" : "array",
                  "items" : {
                    "title" : "Records info",
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "type" : "string"
                      },
                      "single" : {
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/thesaurus_autocomplete" : {
      "post" : {
        "summary" : "Predictive autocomplete search",
        "description" : "Search string in database (begings with $q) and get array of max 25 records",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "table",
          "in" : "query",
          "description" : "Optional comma separated names of thesaurus tables. If undefined, server config thesaurus tables are used",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "string to search in database. Minimun 3 chars for full text search",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "term"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Max number of records returned. Undefined uses default of 25",
          "schema" : {
            "type" : "integer",
            "format" : "int"
          }
        } ],
        "tags" : [ "Thesaurus" ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Array of records",
                  "type" : "array",
                  "items" : {
                    "title" : "Records info",
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "type" : "string"
                      },
                      "single" : {
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/thesaurus_term" : {
      "post" : {
        "summary" : "Get thesaurus term objects (one or various)",
        "description" : "Resolve one or more ts_term from ar_term_id",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "ar_term_id",
          "in" : "query",
          "description" : "Comma separated list of one or various term_id like 'ts1_1,ts1_2'",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "ts1_1"
          }
        }, {
          "name" : "combine",
          "in" : "query",
          "description" : "Optional combined result mode. Options: false | combined | cumulative. Default is false. When is set to combine, only indexations with intersections are returned",
          "schema" : {
            "type" : "string",
            "default" : false
          }
        } ],
        "tags" : [ "Thesaurus" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/thesaurus_indexation_node" : {
      "post" : {
        "summary" : "Indexation object with all required info",
        "description" : "Builds a indexation_node data object",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "term_id",
          "in" : "query",
          "description" : "Term id like 'ts1_1'",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "ts1_1"
          }
        }, {
          "name" : "ar_locators",
          "in" : "query",
          "description" : "json encoded array of locators like [{locator1},{locator2}]",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "[{\"type\":\"dd96\",\"tag_id\":\"1\",\"section_id\":\"1\",\"section_tipo\":\"rsc167\",\"component_tipo\":\"rsc36\",\"section_top_id\":\"1\",\"section_top_tipo\":\"oh1\",\"from_component_tipo\":\"hierarchy40\"},{\"type\":\"dd96\",\"tag_id\":\"1\",\"section_id\":\"4\",\"section_tipo\":\"rsc167\",\"component_tipo\":\"rsc36\",\"section_top_id\":\"3\",\"section_top_tipo\":\"oh1\",\"from_component_tipo\":\"hierarchy40\"}]"
          }
        }, {
          "name" : "image_type",
          "in" : "query",
          "description" : "Selects type of image to use. Values are 'identify_image', 'posterframe'. Default is posterframe",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Thesaurus" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/thesaurus_video_view_data" : {
      "post" : {
        "summary" : "Video player data",
        "description" : "Gets data ued to view video fragment",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "term_id",
          "in" : "query",
          "description" : "Term id to get data like ts1_1",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "ts1_1"
          }
        }, {
          "name" : "ar_locators",
          "in" : "query",
          "description" : "JSON ecoded array of locator objects like [{\"type\":\"dd96\",\"tag_id\":\"2\",\"section_id\":\"1\",\"section_tipo\":\"rsc167\",\"component_tipo\":\"rsc36\",\"section_top_id\":\"1\",\"section_top_tipo\":\"oh1\",\"from_component_tipo\":\"hierarchy40\"},{\"type\":\"dd96\",\"tag_id\":\"6\",\"section_id\":\"1\",\"section_tipo\":\"rsc167\",\"component_tipo\":\"rsc36\",\"section_top_id\":\"1\",\"section_top_tipo\":\"oh1\",\"from_component_tipo\":\"hierarchy40\"}]",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "[{\"type\":\"dd96\",\"tag_id\":\"1\",\"section_id\":\"1\",\"section_tipo\":\"rsc167\",\"component_tipo\":\"rsc36\",\"section_top_id\":\"1\",\"section_top_tipo\":\"oh1\",\"from_component_tipo\":\"hierarchy40\"},{\"type\":\"dd96\",\"tag_id\":\"1\",\"section_id\":\"4\",\"section_tipo\":\"rsc167\",\"component_tipo\":\"rsc36\",\"section_top_id\":\"3\",\"section_top_tipo\":\"oh1\",\"from_component_tipo\":\"hierarchy40\"}]"
          }
        }, {
          "name" : "ar_locators_key",
          "in" : "query",
          "description" : "current array key selector. Default is '0'",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "tags" : [ "Thesaurus" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/thesaurus_childrens" : {
      "post" : {
        "tags" : [ "Thesaurus" ],
        "summary" : "Search all childrens of current term",
        "description" : "Exec a records query in current term table to find records with data parent equal to current term_id",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "$ref" : "#/components/parameters/ar_fields"
        }, {
          "name" : "term_id",
          "in" : "query",
          "description" : "Term id to get data like ts1_1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recursive",
          "in" : "query",
          "description" : "set deep hierarchy search on true",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/thesaurus_parents" : {
      "post" : {
        "tags" : [ "Thesaurus" ],
        "summary" : "Search all parents of current term",
        "description" : "Exec a records query in current term table to find records with data children equal to current term_id",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "$ref" : "#/components/parameters/ar_fields"
        }, {
          "name" : "term_id",
          "in" : "query",
          "description" : "Term id to get data like ts1_2",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recursive",
          "in" : "query",
          "description" : "Set deep hierarchy search single or multi level",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "only_descriptors",
          "in" : "query",
          "description" : "Exclude no descriptors in the result",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "remove_restricted",
          "in" : "query",
          "description" : "Exclude restricted terms in the result",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/free_search" : {
      "post" : {
        "summary" : "Find word/s in DDBB",
        "description" : "Exec a search against transcription column in audiovisual table",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "String to search",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "house"
          }
        }, {
          "name" : "search_mode",
          "in" : "query",
          "description" : "SQL type of search. Default is 'full_text_search'",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rows_per_page",
          "in" : "query",
          "description" : "Number of records returned by page. Default is 10",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int"
          }
        }, {
          "name" : "page_number",
          "in" : "query",
          "description" : "Current page number (pagination params)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset used to paginate results. Default is 0",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int"
          }
        }, {
          "name" : "apperances_limit",
          "in" : "query",
          "description" : "Max number of apperances (matches) calculated. Default is 1",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int"
          }
        }, {
          "name" : "match_select",
          "in" : "query",
          "description" : "Selects specific match inside results. Default = false . Optional",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Exec total records count. Default is true",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "image_type",
          "in" : "query",
          "description" : "Type of image returned. Options are posterframe | identify_image.  Default is posterframe",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "list_fragment",
          "in" : "query",
          "description" : "Resolve text fragment to show in list mode (small text, without video cut). Default is true",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "video_fragment",
          "in" : "query",
          "description" : "Activates video fragment resolution (with extended transcription fragment and video cut). Default is false",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fragment_terms",
          "in" : "query",
          "description" : "Calculates terms (indexations) for current fragment of transcription. Default is false",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Apply a filter to result like 'section_tipo = 1'",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Free" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/full_reel" : {
      "post" : {
        "summary" : "Full transcriptions data",
        "description" : "Get full reel data. Complete transcription without tc cut. Used when you need show full interview (mode full)",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "av_section_id",
          "in" : "query",
          "description" : "Section id number to filter records",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int",
            "default" : 1
          }
        }, {
          "name" : "image_type",
          "in" : "query",
          "description" : "Type of image returned. Options are posterframe | identify_image.  Default is posterframe",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "terms",
          "in" : "query",
          "description" : "Resolves current transcription indexed terms. Default is false",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "tags" : [ "Video view" ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result" : {
                      "type" : "object"
                    },
                    "msg" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/global_search" : {
      "post" : {
        "summary" : "Find word/s in table global_search",
        "description" : "Exec a search against full_data column in global_search table",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/lang"
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "String to search (performs a full text search in column full_data)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "interview"
          }
        }, {
          "name" : "search_modifier",
          "in" : "query",
          "description" : "MySQL search_modifier \n(IN NATURAL LANGUAGE MODE | IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION | IN BOOLEAN MODE | WITH QUERY EXPANSION)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "IN BOOLEAN MODE"
          }
        }, {
          "name" : "sql_filter",
          "in" : "query",
          "description" : "Custom additional filter query (normally is added to standard filter 'q'). Example: filter_date >= 1936",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Exec total records count. Default is true",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "rows_per_page",
          "in" : "query",
          "description" : "Number of records returned by page. Default is 10",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int",
            "default" : 10
          }
        }, {
          "name" : "page_number",
          "in" : "query",
          "description" : "Current page number (pagination params)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset used to paginate results. Default is 0",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int",
            "default" : 0
          }
        } ],
        "tags" : [ "Global" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "table_list" : {
        "type" : "object",
        "required" : [ "table_name" ],
        "properties" : {
          "table_name" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/field_item"
            }
          }
        }
      },
      "field_item" : {
        "type" : "string",
        "example" : "section_id"
      },
      "result" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/row"
        }
      },
      "row" : {
        "type" : "object",
        "required" : [ "table" ],
        "properties" : {
          "table" : {
            "type" : "string",
            "example" : "interview"
          }
        }
      }
    },
    "parameters" : {
      "code" : {
        "name" : "code",
        "in" : "query",
        "required" : true,
        "description" : "Auth code (mandatory)",
        "schema" : {
          "type" : "string"
        }
      },
      "lang" : {
        "name" : "lang",
        "in" : "query",
        "required" : false,
        "description" : "Query lang filter. Use Dédalo lang format like lg-eng for english. If undefined, API server settings default lang is used",
        "schema" : {
          "type" : "string",
          "default" : "lg-eng"
        }
      },
      "ar_fields" : {
        "name" : "ar_fields",
        "in" : "query",
        "required" : false,
        "description" : "Comma separated list of required columns in table",
        "schema" : {
          "type" : "string"
        }
      },
      "rows_per_page" : {
        "name" : "rows_per_page",
        "in" : "query",
        "required" : false,
        "description" : "Number of records in each page",
        "schema" : {
          "type" : "integer",
          "format" : "int"
        }
      }
    }
  }
}