<?php

	# VISUALIZADOR HTML

	# ELEMENTOS

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'in', $modo, $lang);

	print "<div class=\"wrap_component css_wrap_relation_related wrap_component_{$modo} wrap_component_{$tipo}\" ";
	print "id=\"{$id_wrapper}\" ";
	print "data-tipo=\"{$tipo}\" ";
	print "data-section_tipo=\"{$section_tipo}\" ";
	print "data-parent=\"{$parent}\" ";
	print "data-lang=\"{$lang}\" ";
	print "data-modo=\"{$modo}\" ";
	print "data-dato='".$dato_json."' ";
	print "data-component_name=\"{$component_name}\" ";
	print "data-component_info='{$component_info}' ";

	#print "data-hierarchy_sections='".json_encode($hierarchy_sections)."' ";
	print "data-relation_type=\"{$relation_type}\" ";
	print "data-search_tipos='".json_encode($search_tipos)."' ";

	print 'data-filter_by_list=\''.json_encode($filter_by_list).'\' ';

	print "data-search_sections='". json_encode($search_sections)."' ";

	print 'data-search_query_object=\''.$json_search_query_object.'\' ';
	print "data-divisor=\"$divisor\" ";
	print "data-limit=\"$limit\" ";
	print ">";

	# ETIQUETA (LABEL)
	$html_label = component_common_draw::draw_label($this);

	# CONTENIDO (INPUT)
	$html_content = '';
	switch(true) {

		case ($permissions===0) :
			$html_content .= "";
			break;

		case ($permissions===1) :
			$html_content .= $this->valor;
			break;

		case ($permissions>=2) :

			#if($from_modo !== 'edit'){
			#	$html_content .= "<div class=\"css_relation_related_button_close\" onclick=\"component_common.change_mode_component(this, 'edit', '$from_modo')\"></div>";
			#}

			// input data hidden
				$html_content .= "<input type=\"text\" class=\"relation_related_dato_hidden hide\" ";
				$html_content .= "data-limit=\"$limit\" ";
				$html_content .= "value='{$dato_json}' ";
				$html_content .= "/>";


			// Options
				$css_autocomplete_wrapper = '';
				$autosearch_options_js 	  = '';
				$autosearch_options_html  = '';
				$autosearch_options_id 	  = 'autosearch_options_' . $section_tipo .'_'. $tipo;
				$autosearch_options_html .= '<div id="' . $autosearch_options_id . '" class="autosearch_options hide" data-tipo="'.$tipo.'">';
					// filter_by_list
						if ($filter_by_list!==false) {
							// Calculate ar elements to show in filter
								$ar_elements = component_relation_common::get_filter_list_data($filter_by_list);

							$filter_list_options = new stdClass();
								$filter_list_options->target_id 	= $autosearch_options_id;
								$filter_list_options->tipo 			= $tipo;
								$filter_list_options->section_tipo 	= $section_tipo;
								$filter_list_options->ar_elements 	= $ar_elements;
							
							$autosearch_options_js .= 'service_autocomplete.build_filter_list('.json_encode($filter_list_options).');';
						}//end if ($filter_by_list!==false)
					
					// filter fields (advanced search) 
						$filter_by_fields = false;						
						// Calculate ar elements to show in filter							
						$ar_elements = component_relation_common::get_filter_fields_data($search_query_object, $propiedades);						
						if (!empty($ar_elements)) {
							$filter_by_fields = true;
						
							$filter_fields_options = new stdClass();
								$filter_fields_options->tipo 		 = $tipo;
								$filter_fields_options->section_tipo = $section_tipo;
								$filter_fields_options->ar_elements  = $ar_elements;
								$filter_fields_options->op_label_or  = RecordObj_dd::get_termino_by_tipo('dd1061',DEDALO_DATA_LANG,true);
								$filter_fields_options->op_label_and = RecordObj_dd::get_termino_by_tipo('dd1060',DEDALO_DATA_LANG,true);
								$filter_fields_options->operator  	 = isset($propiedades->source->operator) ? $propiedades->source->operator : 'or';
								$filter_fields_options->q_split  	 = isset($propiedades->source->q_split) ? (bool)$propiedades->source->q_split : true;
								$filter_fields_options->target_id 	 = $autosearch_options_id;
							
							$autosearch_options_js .= 'service_autocomplete.build_filter_fields(\''.$section_tipo.'\','.json_encode($filter_fields_options).');';
						}
				$autosearch_options_html .= "</div>";//end autosearch_options


			// Operator
				if ($modo==='search') {
					$html_content .= '<input class="q_operator" type="text" value="'.$q_operator.'" ';
					$html_content .= "onchange=\"component_common.fix_dato(this,'{$component_name}')\" ";
					$html_content .=' />';
				}


			// Rows
				$html_content .= "<div class=\"wrap_relation_related_values\">";
					// terms
						$html_content .= '<ul class="css_relation_related_valor in_search_mode">';
						foreach ($ar_valor as $current_value => $label) {

							$current_locator  		= json_decode($current_value);
							$current_section_id 	= $current_locator->section_id;
							$current_section_tipo 	= $current_locator->section_tipo;

							$html_content .= '<li>';

							# BTN DELETE
							$html_content .= '<div class="icon_bs link css_relation_related_button_delete" ';
							$html_content .= 'onclick="component_relation_related.delete(this)" ';
							$html_content .= "title=\"$label $parent\" ";
							$html_content .= "data-tipo=\"{$tipo}\" ";
							$html_content .= "data-current_value='$current_value' ";
							$html_content .= "data-role=\"relation_related_button_delete\" ";
							$html_content .= '></div>';


							# VALUE . STRING RESOLVED TO SHOW
							$html_content .= $label;
							$html_content .= '<span class="notes">['.$current_locator->section_tipo.'_'.$current_locator->section_id.']</span>';

							/// edit button
								$html_content .= ' <input type="button" class="icon_bs component_relation_related_button_edit" value="" ';
								$html_content .= 'data-role="component_relation_related_button_edit" ';
								$html_content .= "data-section_tipo=\"$current_locator->section_tipo\" ";
								$html_content .= "data-section_id=\"$current_locator->section_id\" ";
								$html_content .= 'onclick="component_relation_related.open_realated(this)" />';

							$html_content .= '</li>';
						}
						$html_content .= '</ul>';

					// references
						if (!empty($references)) {
							#$html_content .= "<hr>";
							$html_content .= '<label>'.label::get_label('referencias').'</label>';
							#dump($references, ' references ++ '.to_string());
							foreach ((array)$references as $key => $current_locator) {

								$html_content .= '<div class="relation_related_input_line">';

								// term string
									#$value = ts_object::get_term_by_locator( $current_locator, DEDALO_DATA_LANG, $from_cache=true );
									$value = $current_locator->label;
									$html_content .= '<span class="locator_label">';
									$html_content .= $value;
									if(SHOW_DEBUG===true) {
										$html_content .= ' <span class="notes">['.$current_locator->section_tipo.'_'.$current_locator->section_id.']</span>';
									}
									$html_content .= '</span>';

								// edit button
									$html_content .= ' <input type="button" class="icon_bs component_relation_related_button_edit" value="" ';
									$html_content .= 'data-role="component_relation_related_button_edit" ';
									$html_content .= "data-section_tipo=\"$current_locator->section_tipo\" ";
									$html_content .= "data-section_id=\"$current_locator->section_id\" ";
									$html_content .= 'onclick="component_relation_related.open_realated(this)" />';

								$html_content .= '</div>';//relation_related_input_line
							}
						}//end if (!empty($references))
				$html_content .= "</div>";//end wrap_parent_values


			// buttons
				$html_content .= '<div class="buttons buttons_and_fields">';

				// button show options
					if ($filter_by_list!==false || ($filter_by_fields!==false && count($ar_elements)>1)) {
						$html_content .= "<div class=\"icon_bs autocomplete_list_button_options edit_hidden\" data-tipo=\"$tipo\" onclick=\"service_autocomplete.toggle_options(this)\"></div>";
					}

				// btn link element (from list)
					if ($modo==='edit') {
						$html_content .= "<div class=\"button_add relation_related_add_button\" ";
						$html_content .= "data-target_section_tipo=\"$target_section_tipo\" ";
						$html_content .= "title=\"Add from list\" ";
						$html_content .= "onclick=\"component_relation_related.open_related_selector_window(this,event)\" ";
						$html_content .= "></div>";
					}

				// button_add. source_mode switch
					$source_mode = 'tree';
					if ($modo==='edit') {
						switch ($source_mode) {
							case 'tree':
							case 'autocomplete':
							default:
								#$hierarchy_types_json 	 = '';
								#$hierarchy_sections_json = '';	// Don't restrict here! 	json_encode(array($target_section_tipo));

								# parent_area_is_model
								if (isset($_GET['model']) && $_GET['model']==1) {
									$parent_area_is_model = true;
								}else{
									$parent_area_is_model = false;
								}
								$parent_area_is_model_json 	= json_encode($parent_area_is_model);

								// btn link element (from tree)
									$html_content .= "<div class=\"button_add relation_related_add_from_tree_button\" ";
									$html_content .= "data-id_wrapper=\"$id_wrapper\" ";
									$html_content .= "data-component_name=\"$component_name\" ";
									#$html_content .= "data-hierarchy_types='{$hierarchy_types_json}' ";
									#$html_content .= "data-hierarchy_sections='{$hierarchy_sections_json}' ";
									$html_content .= "data-parent_area_is_model='{$parent_area_is_model_json}' ";
									$html_content .= "title=\"Add from tree\" ";
									$html_content .= "onclick=\"component_common.open_ts_window(this)\" ";
									$html_content .= "></div>";
								break;
						}//end switch ($source_mode)
					}
				$html_content .= '</div>';


			// component_options_container
				$html_content .= '<div class="component_options_container">';
					// autosearch_options (add after button)
						$html_content .= $autosearch_options_html;

					// autocomplete service
						$autocomplete_wrapper_id = 'aw_' . $identificador_unico;
						$css_autocomplete_wrapper .= ($modo==='search') ? ' in_search_mode' : '';
						$html_content .= '<div class="autocomplete_wrapper '.$css_autocomplete_wrapper.'" id="'.$autocomplete_wrapper_id.'"></div>';
				$html_content .= '</div>';//end component_options_container


			// JS Init component
				$html_content .= '<script>';
				$init_options = new stdClass();
					$init_options->component_name 	= $component_name;
					$init_options->uid 				= $identificador_unico;
				$html_content .= "component_common.init(".json_encode($init_options).");";
				$html_content .= $autosearch_options_js; // Additional js calls
				$html_content .= '</script>';

			// Debug info
				if(SHOW_DEBUG===true) {
					#$html_content .= " <div class=\"debug_info\"> Current val: <strong>$valor</strong></div>";
					#$html_content .= " <span class=\"css_span_debugger\" id=\"debugger_{$tipo}\">{$debugger}</span>";
					$html_content .= "<span class=\"debug_info\">";
					$html_content .= "<br>locators in section relation (relation_type: $this->relation_type - relation_type_rel: $this->relation_type_rel) : ";
					$html_content .= wrap_pre( to_string($dato), false );
					#$html_content .= "<br><span>".component_relation_related::$get_inverse_related_query."</span>";
					$html_content .= "</span>";
				}
			break;
	}//end switch($permissions)


	# Prepare content to show in page
	tools::prepare_content($html_content);


	# PRINT HTML
	print $html_label;
	print $html_content;


	print '</div>'; //wrap


	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'out', $modo, $lang);


