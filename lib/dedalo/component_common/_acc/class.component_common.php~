<?php
# COMPONENT COMMON (ABSTRACT CLASS)
# MÉTODOS COMPARTIDOS POR TODOS LOS COMPONENTES

require_once(DEDALO_LIB_BASE_PATH . '/common/class.common.php');
require_once(DEDALO_LIB_BASE_PATH . '/db/class.RecordObj_matrix.php');
require_once(DEDALO_LIB_BASE_PATH . '/db/class.RecordObj_time_machine.php');



abstract class component_common extends common {
	
	# GENERAL VARS
	protected $id ;						# id (int) Component id in matrix	
	protected $tipo ;					# tipo en estructura ej ('dd22') eq. terminoID	
	protected $parent ;					# id matrix del parent
	protected $lang ;					# lang en estructura ('lg-esp')	
	protected $traducible ;				# definido en tesauro
	protected $modo ;					# default edit		
	protected $dato ;					# dato
	protected $valor ;					# normalmente es dato	
	public $version_date;				# normalmente despejado de time machine y asignado al component actual
	
	# STRUCTURE DATA
	protected $RecordObj_ts ;			# obj ts
	protected $modelo;
	protected $norden;
	protected $label;					# etiqueta	
	
	protected $required ;				# field is required . Valorar de usar 'Usable en Indexación' (tesauro) para gestionar esta variable
	protected $debugger ;				# info for admin
	protected $ejemplo ;				# ex. 'MO36001-GA'
	protected $ar_tools_name = array('tool_time_machine','tool_lang');
	protected $ar_tools_obj ;
				
	protected $exists_dato_in_any_lan	= false;
	protected $dato_resolved ;

	protected $expected_lang;			# Idioma esperado para este componente (usado para verificar que la estrucutra está bien formada)

	public $section_obj;				# parent section obj (optional, util for component_av...)
		
	
	function __construct($id=NULL, $tipo=NULL, $modo='edit', $parent=NULL, $lang=DEDALO_DATA_LANG) {

		global $log_messages;

		# CUSTOM TEST VALID TIPO
		if ( empty($tipo) || !strlen($tipo) ) {
			$msg = "Component common: valid 'tipo' value is mandatory!";
			error_log($msg);
			$log_messages .= $msg;
			throw new Exception($msg, 1);				
		}

		# TEST VALID PARENT
		#if ( !strlen($parent) ) {
		if ( $id<1 && !strlen($parent) ) {
			$msg = "Component common: valid 'parent' value is mandatory! ";
			error_log($msg);
			dump($parent,'$parent on error');
			$log_messages .= $msg;
			throw new Exception($msg, 1);
		}
		# TEST VALID LANG
		if ( empty($lang) ) {
			$msg = "Component common: valid 'lang' value is mandatory!";
			error_log($msg);
			$log_messages .= $msg;
			throw new Exception($msg, 1);
		}
		# Overwrite var '$lang' with previous component declatarion of '$this->lang'
		if(isset($this->lang)) $lang = $this->lang;

		# STRUCTURE DATA
		# Fijamos el tipo recibido y cargamos la estructura previamente para despejar si este tipo es traducible o no
		# y fijar de nuevo el lenguaje en caso de no ser traducible
		$this->tipo 	= $tipo;
		parent::load_structure_data();	

		# CHECK LANG
		# Establecemos el lenguaje preliminar (aunque todavía no están cargados lo datos de matrix, ya tenemos la información de si es o no traducible
		# a partir de la carga de la estructura)
		$lang_expected = $lang;			
		if ($this->traducible=='no') {
			$lang_expected = DEDALO_DATA_NOLAN;
			# Verify if received lang is coherent (Note if no lang is passed, default value 'DEDALO_DATA_LANG' is used)
			if($lang != $lang_expected) {
				if(SHOW_DEBUG===true) dump($this);
				trigger_error("Inconsistency detected: lang:$lang is not valid for a non-translatable component [$tipo] (expected lang:$lang_expected)");				
			}
		}			
		/**/
		# TRY CALCULATE ID FROM TIPO, PARENT, LANG
		if( $id<1 && (strlen($tipo) && $parent>0 && strlen($lang_expected)) ) {
			$id = self::get_id_by_tipo_parent($tipo, $parent, $lang_expected);
				#dump($id,"Calculated id [$id] from tipo:$tipo, parent:$parent, lang_expected:$lang_expected ");
		}
		
		/*
		# ID EXISTS
		if($id>0) {
			
			$this->id	= $id;
			$this->load_matrix_data();

			# LANG TEST . Testeamos si el idioma guardado en matrix se corresponde con lo esperado
			if($this->lang != $lang_expected) {
				trigger_error("Inconsistency detected: lang:$this->lang is not expected lang:$lang_expected ");
				if(SHOW_DEBUG===true) {
					dump($this);
				}
			}		
		
		# ID NOT EXISTS
		}else{

			# Set vars an create component empty, without data, only tipo, parent, lang_expected	
			$this->tipo 	= $tipo;
			$this->parent 	= $parent;	
			$this->lang 	= $lang_expected;
		}					
		*/

		# Fix current id
		$this->id			= $id;						
		$this->tipo 		= $tipo;
		$this->parent 		= $parent;	
		$this->lang 		= $lang_expected;

		$this->modo 			= $modo;	
		$this->ar_css			= NULL;			
		$this->ar_tools_obj		= false;
		$this->debugger			= "ID:$this->id - tipo:$this->tipo - norden:$this->norden - modo:$this->modo - lang:$this->lang - parent:".$this->get_parent();
		$this->ejemplo			= $this->get_ejemplo();

		# LOAD DATA
		parent::load_matrix_data();
		

		# LOG
		#$log = logger::get_instance();
		#$log->log_message("Loaded component ".$this->get_label().", id:$id, tipo:$tipo, modo:$modo, parent:$parent, ar_css:$ar_css", logger::DEBUG, __METHOD__);
		
		#if ($tipo=='dd132') {
			#$dato= $this->get_dato();
			#dump($this,'usuario',$dato);
		#}
		#$this->set_matrix_table('matrix');
	}

	# define id
	protected function define_id($id) {	$this->id = $id ; }
	# define tipo
	protected function define_tipo($tipo) {	$this->tipo = $tipo ; }
	# define lang
	protected function define_lang($lang) {	$this->lang = $lang ; }
	# define modo
	protected function define_modo($modo) {	$this->modo = $modo ; }

	
	/**
	* FIX LANGUAJE
	* Empty method. Overwrite calling 'fix_language_nolan' when you want fix one lang
	*/
	protected function fix_language(){
		return NULL;
		# Set current data lang	
		$this->lang = DEDALO_DATA_LANG;
	}
	protected function fix_language_nolan() {

		$this->expected_lang = DEDALO_DATA_NOLAN;
		return NULL;

		dump($this," fix_language_nolan ");
		# Fix lang allways
		$this->lang = DEDALO_DATA_NOLAN;
		# Fix traducible
		$this->traducible = 'no';
	}


	/**
	* RESOLVE ID BY TIPO , PARENT AND LANG
	* Only 1 record is valid
	*/
	public static function get_id_by_tipo_parent($tipo, $parent, $lang) {
		/*
		# STATIC CACHE
		static $id_by_tipo_parent_cache;
		$id_unic = $tipo . '-'. intval($parent) . '-' . $lang;
		if(isset($id_by_tipo_parent_cache[$id_unic])) {
			dump($id_by_tipo_parent_cache[$id_unic], " result returned from cache (get_id_by_tipo_parent): $id_unic");
			return $id_by_tipo_parent_cache[$id_unic];
		}
		*/
		
		unset($arguments);				
		$arguments['tipo']		= $tipo;
		$arguments['parent']	= $parent;
		$arguments['lang']		= $lang;
		$matrix_table 			= common::get_matrix_table_from_tipo($tipo);		
		$RecordObj_matrix		= new RecordObj_matrix(NULL,$matrix_table);
		$ar_result				= $RecordObj_matrix->search($arguments);
			#dump($ar_result, print_r($arguments,true));

		if (empty($ar_result)) {
			return NULL;
		}else if (count($ar_result)>1) {
			dump($arguments,'$arguments');
			dump($ar_result,'$ar_result');
			throw new Exception("Warning: Inconsistent database: more than one record was found. Please contact with the administrator", 1);			
		}else{
			$result = $ar_result[0]; 
		}

		# STORE CACHE DATA
		#$id_by_tipo_parent_cache[$id_unic] = $result;

		return $result;
	}

	
	/**
	* FILTRO
	* Consulta si el parent (la sección a que pertenece) está autorizada para el usuario actual
	* @return bool(true/false)
	* Devuelve false si NO es autorizado
	*/
	function get_filter_authorized_record() {

		#dump($this->get_modo(),'get_filter_authorized_record modo');
		#dump(component_security_areas::get_ar_authorized_areas_for_user(navigator::get_userID_matrix(), $simple_array=false));

		# Si no estamos logeados, no se aplica el filtro (caso componentes input text etc, en formulario de login)
		if(!login::is_logged()) return NULL;

		# Si el modo es uno de los excluidos, no se aplica el filtro (caso de search por ejemplo)
		$ar_excluded = array('search','list_tm');
		$modo 		 = $this->get_modo();
		if (in_array($modo, $ar_excluded)) return NULL;
			

		$userID_matrix 		= navigator::get_userID_matrix();
		$is_global_admin 	= component_security_administrator::is_global_admin($userID_matrix);	#dump($is_global_admin,'',"current_userID:$userID_matrix");
		if ( $is_global_admin ) {
			return true;
		}
		# Filtro de registros
		# A partir del tipo del parent del componente (la sección a que pertenece) generamos el filtro y verificamos que estamos autorizados a ver este componente
		$parent 			= $this->get_parent();

		if ($parent==0) {
			# Estamos ya en una sección. No procede..
			#dump($this);
			return false; # ?????????????????????????????????????????
		}

		$RecordObj_matrix 	= new RecordObj_matrix($parent);
		$RecordObj_matrix->set_matrix_table($this->matrix_table);
		$section_tipo 		= $RecordObj_matrix->get_tipo();	#dump($section_tipo,'$section_tipo');
		$ar_filter 			= filter::get_ar_filter($RecordObj_matrix);
			#dump($ar_filter,'ar_filter', "parent $parent en section tipo $section_tipo");

		if (!in_array($parent, $ar_filter)) {
			#echo " No autorizado para ". $this->get_id();			
			#throw new Exception("Warning: You are not authorized to see this record from component ($parent)", 1);
			return false;	
		}
		return true;
	}
	


	
	# EJEMPLO
	protected function get_ejemplo() {
		return $this->debugger;	
		if(empty($this->ejemplo)) return "example: 'MO-15-5620-GANDIA'";		
		return parent::get_ejemplo();
	}
	
	
	# REQUIRED
	private function get_required() {
		
		if($this->required=='si') {						
			return false;
		}else{			
			return true;
		}
	}
		
	# GET TOOLS
	public function get_ar_tools_obj() {
			
		if($this->ar_tools_obj===false) {
			$this->load_tools();
		}		
		return $this->ar_tools_obj;
	}
	# LOAD TOOLS
	public function load_tools( $specific_tool=false ) {	

		if ($specific_tool) {

			$ar_tools_name[] = $specific_tool;
			/*
			# Load specific required tool
			# TOOL OBJ
			require_once(DEDALO_LIB_BASE_PATH . '/component_tools/'.$specific_tool.'/class.'.$specific_tool.'.php');
			$tool_obj					= new $specific_tool($this);
				dump($tool_obj,'LOADED SPECIFIC TOOL $tool_obj');
			
			return $tool_obj;
			*/
		}else{

			# Load all tools of current component
			$ar_tools_name = $this->get_ar_tools_name();
				dump($ar_tools_name,'ar_tools_name PRE AUTH');
		}

		# If user is not global admin, filter auth tools
		$user_id_matrix 	= navigator::get_userID_matrix();
		$is_global_admin 	= component_security_administrator::is_global_admin($user_id_matrix);
		if (!$is_global_admin) {

			# Get list of user authorized tools				
			$auth_tools 	= component_security_tools::get_ar_user_tools_by_user($user_id_matrix);
				#dump($auth_tools,'auth_tools');

			# Unset values not authorized for current user
			foreach ($ar_tools_name as $current_tools_name) {
				if (!in_array($current_tools_name, $auth_tools)) {

					$keysToRemove = array_keys($ar_tools_name,$current_tools_name);
					foreach($keysToRemove as $k) {
					    unset($ar_tools_name[$k]);
					}
					#dump($current_tools_name,"UNSET $current_tools_name");
				}
			}
		}
		dump($ar_tools_name,'ar_tools_name POST AUTH');
		
		# Create obj tools array
		#$ar_tools_obj = null;
		if( is_array($ar_tools_name)) foreach ($ar_tools_name as $tool_name) {
			
			# TOOL OBJ
			require_once(DEDALO_LIB_BASE_PATH . '/component_tools/'.$tool_name.'/class.'.$tool_name.'.php');
			$tool_obj					= new $tool_name($this);					
			$this->ar_tools_obj[$tool_name]	= $tool_obj;
		}		
		#dump($ar_tools_obj);
		
		# set
		#if (!$specific_tool)
		#$this->ar_tools_obj = $ar_tools_obj;
		
		return $this->ar_tools_obj;				
	}

	
	
	/**
	* GET VALOR
	* LIST:
	* GET VALUE . DEFAULT IS GET DATO . OVERWRITE IN EVERY DIFFERENT SPECIFIC COMPONENT
	*/
	public function get_valor() {
		
		$valor = self::get_dato();
		if(!is_array($valor)) return $valor;		
		return "Not string value";
	}
	
	
	/**
	* GET DATO WITH LANG FALLBACK
	*
	*/
	protected function get_dato() {
		
		if(isset($this->dato_resolved)) return $this->dato_resolved;
		
		# Dato real del componente actual
		$dato 			= parent::get_dato();
							
		$parent			= self::get_parent();		#dump($parent,'$parent');
		$tipo			= self::get_tipo();			#dump($tipo,'$tipo');
		$traducible		= self::get_traducible();	#dump($traducible,'$traducible');
		
		# lang default fallback
		if( (empty($dato) ) && $parent >0 ) {	#&& $this->dato_resolved!='si'
			
			#$dato = component_common::get_current_record_with_lang_fallback_unified($this)[$tipo];	dump($dato,'dato'); 
			
			# Verificamos si hay algún dato en algún idioma
			unset($arguments);			
			$arguments['parent']= $parent;
			$arguments['tipo'] 	= $tipo;		
			$RecordObj_matrix	= new RecordObj_matrix(NULL);
			$ar_id				= $RecordObj_matrix->search($arguments,$this->matrix_table);
				#dump($ar_id,'ar_id');
			
			# Si existe alguna versión en algún idioma fijamos la variable
			if(!empty($ar_id)) $this->exists_dato_in_any_lang = true;
			
		  	# NO TRADUCIBLE
			# Si el componente no es traducible, lo reemplazamos por el único que existirá en matrix ignorando su lenguaje (si ya existe). 
			if($traducible=='no') {				
				
				$dato	= self::get_dato_no_traducible();
					
		  	# SI TRADUCIBLE	Default es si
			# Localizamos el dato en el lenguaje por defecto			
			}else{
				
				$dato_default_lang	= self::get_dato_default_lang();
				# De momento lo asignamos como valor del texto del ejemplo (cuando el valor es string). Falta asignarlo a un tool de lenguaje para edit.
				#if(is_string($dato_default_lang)) {	
				#	self::set_ejemplo(' Original: '.$dato_default_lang	.'');											
				#}				
				# Sólo si estamos en modo list retornamos el dato del leguaje por defecto
				# Es importante para no mostrar el dato incorrecto en los campos de edición (edit)
				# pero si mostrar la traducciín en los listados (con estilo pitufo)
				if($this->modo=='list') {
					$dato = component_common::decore_untranslated($dato_default_lang);
				}	
			}
			/**/				
			
		}#if(empty($dato)
		
		$this->dato_resolved = $dato ;
			#dump($dato,"dato from tipo $tipo");
						
		return $dato ;		
	}
	# DATO REAL
	public function get_dato_real() {
		return parent::get_dato();	
	}
	
	/**
	* DATO IN DEFAULT LANG
	*/
	protected function get_dato_default_lang() {
		
		$parent = self::get_parent();
		$tipo	= self::get_tipo();				#dump($tipo);

		if (empty($parent) || empty($tipo)) {
			throw new Exception("Few vars on get_dato_default_lang", 1);			
		}		
		
		# No existe registro en este idioma. Buscamos con el idioma de datos por defecto DEDALO_DATA_LANG_DEFAULT
		unset($arguments);			
		$arguments['parent']= $parent;
		$arguments['tipo'] 	= $tipo;
		$arguments['lang'] 	= DEDALO_DATA_LANG_DEFAULT ;
		
		$RecordObj_matrix	= new RecordObj_matrix(NULL);
		$ar_id				= $RecordObj_matrix->search($arguments,$this->matrix_table);		#dump($ar_id);
		
		if(!empty($ar_id[0])) {
			$current_id		= $ar_id[0];
			
			# Despejamos el dato
			$current_class_name	= get_class($this);
			$component_obj		= new $current_class_name($current_id, $tipo);
			$dato				= $component_obj->get_dato_real();			#dump($dato);

			if ($dato=='""') {
				$dato 		= NULL;
			}
			
		}else{
			$dato			= NULL;
		}
		
		if(is_array($dato)) $dato = implode(',',$dato);
		
		return $dato ;
	}
	
	/**
	* DATO NO TRADUCIBLE
	* Despeja el único dato de este componente.
	* Si hay mas de 1 generará un error de consistencia
	*/
	protected function get_dato_no_traducible() {
		
		$parent = self::get_parent();
		$tipo	= self::get_tipo();				#dump($tipo);

		if (empty($parent) || empty($tipo)) {
			throw new Exception("Few vars on get_dato_default_lang", 1);			
		}		
		
		# Búsqueda
		unset($arguments);
		$arguments['parent']= $parent;
		$arguments['tipo'] 	= $tipo;		
		$RecordObj_matrix	= new RecordObj_matrix(NULL);
		$ar_id				= $RecordObj_matrix->search($arguments,$this->matrix_table);						#dump($ar_id);		

		if(empty($ar_id)) {

			$dato 				= NULL;

		}else if(count($ar_id)>1) {

			if (SHOW_DEBUG) dump($ar_id,'$ar_id'); 
			throw new Exception(__METHOD__ . "Inconsistency: More than one record founded!", 1);

		}else{
			
			$current_id			= $ar_id[0];
			
			# Despejamos el dato
			$current_class_name	= get_class($this);
			$component_obj		= new $current_class_name($current_id, $tipo, $modo='edit', $parent, $lang=DEDALO_DATA_NOLAN);	#($id=NULL, $tipo=NULL, $modo='edit', $parent=NULL, $lang=DEDALO_DATA_LANG) 
			$lang 				= $component_obj->get_lang();
			$dato				= $component_obj->get_dato_real();							#dump($dato,'dato');

			if ($lang != DEDALO_DATA_NOLAN) {
				trigger_error("Incorrect lang ($lang) for current component ($current_class_name - $tipo - $current_id). Expected  ".DEDALO_DATA_NOLAN);
			}	
		}
		
		return $dato ;
	}

	/**
	* GET DATO AS STRING
	* Get dato formated as string
	*/
	function get_dato_as_string() {

		$dato = $this->get_dato();
		#return var_export($dato,true);
		
		if(is_array($dato)) { 
			$string = 'Array: ';
			foreach ($dato as $key => $value) {
				if(is_array($value)) $value = 'array '.implode(', ', $value );
				$string .= $key .':'. $value .', ';
			}
			if(strlen($string)>2) $string = substr($string, 0,-2);	
			return $string;
		}else if (is_object($dato)) {
			$string = 'Object: ' . get_class($dato);;
		}else if (is_int($dato)) {
			$string = 'Int: ' . $dato;
		}else if (is_string($dato)) {
			$string = 'Str: ' . $dato;
		}
		return $dato;
	}


	/**
	* COMPONENT IS RELATIONABLE
	* @return bool(true/false)
	*/
	protected function is_relationable() {

		$component_name 			= get_class($this);
		$ar_components_reationables = array('component_text_area');

		if( in_array($component_name, $ar_components_reationables) ) 
			return true;

		return false;
	}
	
	/**
	* GET MODIFICATION DATE
	*/
	function get_mod_date() {
		
		$RecordObj_time_machine = $this->get_last_time_machine_obj();						#dump($RecordObj_time_machine );		
		
		if(is_object($RecordObj_time_machine)) {	
			return $RecordObj_time_machine->get_mod_date();	
		}		
		return NULL;
	}
	/**
	* GET MODIFICATED BY USER
	*/
	function get_mod_by_user_name() {
		
		$RecordObj_time_machine = $this->get_last_time_machine_obj();						#dump($RecordObj_time_machine );		
		
		if(is_object($RecordObj_time_machine)) {	
			return $RecordObj_time_machine->get_user_name();	
		}		
		return NULL;
	}	
	
	function get_last_time_machine_obj() {
		
		unset($arguments);			
		$arguments['id_matrix']		= $this->id;
		$arguments['lang']			= $this->lang;
		#$arguments['order_by_desc']	= 'timestamp';		
		$RecordObj_time_machine		= new RecordObj_time_machine(NULL);
		$ar_id						= $RecordObj_time_machine->search($arguments);				#dump($ar_id,'ar_id');
		
		if(count($ar_id)>0) {
			$last_tm_record_id 		= $ar_id[0];
			$RecordObj_time_machine	= new RecordObj_time_machine($last_tm_record_id);		#dump($RecordObj_time_machine);	
			
			return 	$RecordObj_time_machine;	
		}
		return NULL;
	}
	
	
	
	/**
	* AR LIST OF VALUES
	* USADO POR CHECKBOES, RADIO_BUTTONS Y SELECTS 
	* 
	*/
	public function get_ar_list_of_values() {
		
		if(isset($this->ar_list_of_values)) return $this->ar_list_of_values;
		
		# vars
		$ar_list_of_values	= array();		$ar_final=array();	
		$tipo 				= $this->tipo;			
		
		# Obtenemos los terminos relacionados del componente actual
		$ar_terminos_relacionados 	= RecordObj_ts::get_ar_terminos_relacionados($tipo, $cache=false, $simple=true);
			#dump($ar_terminos_relacionados,"ar_terminos_relacionados");
			
		# Recorremos el array por cada "valor" del dato del componente origen (es un array)			
		foreach ($ar_terminos_relacionados as $terminoID_valor) {
				
				# Creamos un nuevo objeto tesauro con los terminos relacionados del termino "valor" para verificar que la lista se compone de datos de un campo diferente a "valor"				
				$ar_termino_valor_relacionado 	= RecordObj_ts::get_ar_terminos_relacionados($terminoID_valor, $cache=false, $simple=true);
					#dump($ar_termino_valor_relacionado,"ar_termino_valor_relacionado for $terminoID_valor");

				
				# Si el termino "valor" del tesauro tiene relacion con algún campo 
				# despejamos las relaciones para obtener los datos de los campos relacionados
				if (count($ar_termino_valor_relacionado) > 0) {					
					
					throw new Exception("Temporal para detectar el uso de este script", 1);
					foreach($ar_termino_valor_relacionado as $terminoID_valor) {
					
						#obtenemos el nombre del campo relacionado que identifica la lista
						//$terminoString_valor 	= RecordObj_ts::get_termino_by_tipo($terminoID_valor);
						
						#seleccionamos todos los datos de la lista con el idioma principal
						unset($arguments);
						$arguments['tipo']		= $terminoID_valor;
						#$arguments['lang']		= $lang;
						$RecordObj_matrix		= new RecordObj_matrix(NULL);
						$ar_records				= $RecordObj_matrix->search($arguments,$this->matrix_table);
							#dump($ar_records,'ar_records', "arguments: ".var_export($arguments,true));						
						
						# despejamos cada dato para obtener su padre que es el identificador del array
						# y despejamos el dato
						# creamos en array con forma: [padreID] [nº de orden] = dato
						foreach ($ar_records as $ID){ 
						
							$RecordObj_matrix 				= new RecordObj_matrix($ID);
							$RecordObj_matrix->set_matrix_table($this->matrix_table);								
							$parentID						= $RecordObj_matrix->get_parent();								
							$ar_list_of_values[$parentID][] = $RecordObj_matrix->get_dato();
						}
						#dump($ar_list_of_values,'$ar_list_of_values');					
					}
							
				}else{					
						# si el término "valor" del tesauro NO tiene relacion con un campo
						# el dato de la lista se obtiene directamente
						$modelo_name = RecordObj_ts::get_modelo_name_by_tipo($terminoID_valor);
							#dump($modelo_name,"modelo_name for $terminoID_valor");

						# Es traducible ?
						$RecordObj_ts	= new RecordObj_ts($terminoID_valor);						
						$traducible		= $RecordObj_ts->get_traducible();
							#dump($traducible,"traducible for $terminoID_valor");

						if ($traducible=='no') {
							$current_lang = DEDALO_DATA_NOLAN;
						}else{
							$current_lang = DEDALO_DATA_LANG;
						}

						# Matrix table
						$ar_parent_section = RecordObj_ts::get_ar_terminoID_by_modelo_name_and_relation($terminoID_valor, 'section', $relation_type='parent');
						if(empty($ar_parent_section[0])) throw new Exception("Error Processing Request: parent section of $terminoID_valor not found", 1);
						# Section related terms
						$ar_related = RecordObj_ts::get_ar_terminoID_by_modelo_name_and_relation($ar_parent_section[0], 'matrix_table', $relation_type='termino_relacionado');
						if(!empty($ar_related[0])) {
							$current_matrix_table = RecordObj_ts::get_termino_by_tipo($ar_related[0]);	# custom
						}else{
							$current_matrix_table = 'matrix';	# defult 
						}
						
						# seleccionamos todos los datos de la lista con el idioma principal
						unset($arguments);
						$arguments['tipo']			= $terminoID_valor;
						$arguments['order_by_asc']	= 'id';	
						$RecordObj_matrix			= new RecordObj_matrix(NULL);
						$ar_records					= $RecordObj_matrix->search($arguments,$current_matrix_table);
							#dump($ar_records,"ar_records $modelo_name  arguments: ".print_r($arguments,true). " - terminoID_valor:$terminoID_valor - matrix_table:$current_matrix_table");

						foreach ($ar_records as $current_id) {
							
							$current_obj	= new $modelo_name($current_id, $terminoID_valor, $modo='edit', $parent=NULL, $current_lang);	#($id=NULL, $tipo=NULL, $modo='edit', $parent=NULL, $lang=DEDALO_DATA_LANG)
							$dato 			= $current_obj->get_dato();					#dump($dato,"$terminoID_valor $current_id $this->matrix_table $current_lang");
							$parentID		= $current_obj->get_parent();		#dump($parentID,"parentID of $current_id - $terminoID_valor");
							

							$ar_final[$parentID][$terminoID_valor] = component_common::get_current_record_with_lang_fallback_unified($current_obj);
						}		

				}#end if (count($ar_termino_valor_relacionado) > 0)							
		}#end foreach ($ar_terminos_relacionados as $terminoID_valor)

		$ar_list_of_values = $ar_final;

		# agrupamos los valores del array por el parent y ponemos una coma entre valores
			#dump($ar_list_of_values,"ar_list_of_values before");	
		$ar_list_of_values = self::get_imploded_ar_list_of_values($ar_list_of_values);
			#dump($ar_list_of_values,"ar_list_of_values after");
		
		$this->ar_list_of_values = $ar_list_of_values;

			#dump($ar_final,'$ar_final');
			
		return ($this->ar_list_of_values);			
	}


	/**
	* GET CURRENT RECORD WITH LANG FALLBACK UNIFIED 
	* A partir de tipo y parent del objeto recibido despeja cuales de los registros disponibles están en el idioma actual
	* (si son traducibles) y si no lo están busca el equivalente en el idioma de datos por defecto
	* @param $component_obj
	* @return $ar_final
	*	Array tipo => dato (like Array([dd156] => Documentos solamente))
	*/
	public static function get_current_record_with_lang_fallback_unified($component_obj) {

		# vars (need 'traducible', 'parent', 'tipo')
		$traducible 		= $component_obj->get_traducible();
		$parentID 			= $component_obj->get_parent();		if(empty($parentID)) throw new Exception("parentID is empty", 1);		
		$tipo 				= $component_obj->get_tipo();
		$matrix_table 		= $component_obj->get_matrix_table();
		$ar_final 			= array();

		# Despejamos todos sus hijos
		unset($arguments);
		$arguments['parent']	= $parentID;
		$arguments['tipo']		= $tipo;
		$RecordObj_matrix		= new RecordObj_matrix(NULL);
		$ar_records				= $RecordObj_matrix->search($arguments,$matrix_table);
			#dump($ar_records,'$ar_records');

		
		# EMPTY RECORDS CASE 
		if (empty($ar_records)) {
			if(SHOW_DEBUG) dump($component_obj,'$component_obj received obj');
			# Resultado vacío. 
			#dump($ar_records,'ar_records', "arguments: ".print_r($arguments,true));
			trigger_error("No records found in matrix with arguments: ".print_r($arguments,true));

		# NORMAL CASE
		}else{

			foreach ($ar_records as $id) {
				
				# NO TRADUCIBLE
				if ($traducible=='no') {

					# Si hay mas de 1 registro lanzamos un error pues habrá una inconsistencia aquí
					if (count($ar_records)>1) {
						dump($ar_records,'$ar_records');
						throw new Exception("Inconsistency found. Too much records", 1);				
					}
										
					$RecordObj_matrix		= new RecordObj_matrix($id);
					$RecordObj_matrix->set_matrix_table($matrix_table);
					$lang 					= $RecordObj_matrix->get_lang();
					if ($lang==DEDALO_DATA_NOLAN) {
						$dato 				= $RecordObj_matrix->get_dato();				#dump($dato,"dato para $terminoID_valor ".DEDALO_DATA_NOLAN);					
						$ar_final[$tipo]	= $dato;
					}
				# TRADUCIBLE FALLBACKS
				}else{

					$RecordObj_matrix		= new RecordObj_matrix($id);
					$RecordObj_matrix->set_matrix_table($matrix_table);
					$lang 					= $RecordObj_matrix->get_lang();
					
					# 1 DEDALO_DATA_LANG
					if ($lang==DEDALO_DATA_LANG) {
						$dato 				= $RecordObj_matrix->get_dato();				#dump($dato,"dato para $terminoID_valor ".DEDALO_DATA_NOLAN);					
						$ar_final[$tipo]	= $dato;
					}
					# 2 DEDALO_DATA_LANG_DEFAULT
					else if ($lang==DEDALO_DATA_LANG_DEFAULT){
						$dato 				= $RecordObj_matrix->get_dato();				#dump($dato,"dato para $terminoID_valor ".DEDALO_DATA_NOLAN);					
						$ar_final[$tipo]	= component_common::decore_untranslated($dato);
					}

				}#if ($traducible=='no')

			}#END foreach

		}#END if (empty($ar_records))
		#dump($ar_final,"ar_final for $parentID - $tipo");
		return $ar_final;
	}


	/**
	* GET AR RECORDS WITH FALLBACK (lang fallback)
	* Return array of values with lang fallback of current component by tipo
	* Used by component_filter get_ar_proyectos_for_current_section
	* Used by component_filter_master get_ar_proyectos_section
	* @param $ar_records_source 
	* @param $tipo
	*/
	public static function get_ar_records_with_lang_fallback($ar_records_source, $tipo) {
		
		$ar_records_final = array();
		
		if (is_array($ar_records_source)) foreach($ar_records_source as $id ) {

			$modelo_name = RecordObj_ts::get_modelo_name_by_tipo($tipo);
						
			# seleccionamos todos los datos de la lista con el idioma principal
			unset($arguments);
			$arguments['parent']		= $id;
			$arguments['tipo']			= $tipo;
			$RecordObj_matrix			= new RecordObj_matrix(NULL);
			$matrix_table 				= common::get_matrix_table_from_tipo($tipo);
			$ar_records					= $RecordObj_matrix->search($arguments,$matrix_table);
				#dump($ar_records,'ar_records ', "$modelo_name  arguments: ".print_r($arguments,true));
			
			# Recorremos los hijos para determinar cual mostrar en función del idioma
			foreach ($ar_records as $current_id) {
				
				$current_obj	= new $modelo_name($current_id, $tipo);
				$parentID		= $current_obj->get_parent();		#dump($parentID,"parentID of $current_id - $terminoID_valor");

				$current_record_with_lang_fallback 	= component_common::get_current_record_with_lang_fallback_unified($current_obj);
				$ar_records_final[$id]				= $current_record_with_lang_fallback[$tipo];
			}		
		}
		#dump($ar_records_final);
		return $ar_records_final;
	}



	# Despejamos la lista con los valores agrupados por "parents"
	private static function get_imploded_ar_list_of_values($ar_list_of_values) {
		
		$ar_list_of_values_formated = array();
	
		if(is_array($ar_list_of_values)) foreach($ar_list_of_values as $key => $value) {
			
			$string = '';
			if(is_array($value)) foreach($value as $key2) {
				if (is_array($key2)) foreach($key2 as $key3) {
					if (is_array($key3)) foreach ($key3 as $key4) {
						$string .= "$key4, ";
					}else{
						$string .= "$key3, ";
					}						
				}else{
					$string .= "$key2, ";
				}					
			}else{
				$string .= "$value, ";	
			}
			#echo "\t - $key: $string <br>\n";
			$ar_list_of_values_formated[$key] =  substr($string,0,-2); 	
		}		
		return $ar_list_of_values_formated;
	}


	
	/**
	* DECORE UNTRANSLATED
	*/
	public static function decore_untranslated($string) {
		return '<span class="untranslated">'.$string.'</span>';
	}
	/**
	* GET LANG NAME
	*/
	protected function get_lang_name() {
		
		$lang 		= self::get_lang();
		$lang_name 	= RecordObj_ts::get_termino_by_tipo($lang);
		
		return $lang_name;	
	}



	/**
	* ADD ELEMENT TO DATO ARRAY
	* Add element received to array (dato) and return resultant array
	* @param $element
	*	String
	* @param $dato
	*	Array of elements. Key=auto, Value=tag,  like '0=>861.0.0,1=>875.0.0'
	*/
	public static function add_element_to_dato_array($element, $dato_array) {

		if(is_array($dato_array)) {
			array_push($dato_array, $element);
			$result = array_unique($dato_array);
		}else{
			$result = array($element);
		}
		#dump($result,'$result');
		return($result) ;
	}
	/**
	* REMOVE ELEMENT TO DATO ARRAY
	* Remove element received on array (dato) and return resultant array
	* !Important: force build new array to keep numeric key correlation (maintain json array format in matrix)
	* @param $element
	*	String full tag like '861.0.0'
	* @param $dato
	*	Array of elements. Key=auto, Value=tag,  like '0=>861.0.0,1=>875.0.0'
	*/
	public static function remove_element_to_dato_array($element, $dato_array) {

		if(!is_array($dato_array)) return NULL;

		$ar_final = array();
		foreach ($dato_array as $current_target) { 
			
			if ($current_target != $element) {
				# !Important: rebuilding array from index 0 (mantains json format)
				$ar_final[] = $current_target;
			}	
		}
		
		return $ar_final;
	}

	




	/**
	* SAVE 
	* Save component common in matrix
	* @param Is mandatory set object vars (id) or (tipo,parent,lang) 
	* If current component don't have record in matrix, create new record and return matrix id
	* @return id matrix 
	*/
	public function Save() {
		
		# main vars
		$id 	= $this->get_id();
		$parent = $this->get_parent();			#$id=NULL, $tipo=false, $modo='edit', $parent=NULL, $lang=false) {
		$tipo 	= $this->get_tipo();		
		$lang 	= $this->get_lang();
		if (empty($lang)) {
			$lang = DEDALO_DATA_LANG;
		}
		/* Innecesario ???
		# Si sabemos que el elemento no es traducible, fijamos su 'lang' en 'lg-nolan' (DEDALO_DATA_NOLAN)
		if ($this->traducible=='no') {
			$lang = DEDALO_DATA_NOLAN;
		}
		*/

		# DATO
		$dato 	= $this->dato;
		
		
		# Verify dato is not empty . If dato is empty, nothing is done
		#if(!$id && empty($dato))
		#	throw new Exception("Save: Nothing to save.. (id:$id, dato:$dato)", 1);
	
		# Verify component minumun vars before save 
		if( !$id && (!strlen($parent) || empty($tipo) || empty($lang) ) ) 
			throw new Exception("Save: More data are needed! id:$id, parent:$parent, tipo,$tipo, lang,$lang", 1);

		# Matrix
		$RecordObj_matrix	= new RecordObj_matrix($id,$parent,$tipo,$lang);
		$RecordObj_matrix->set_matrix_table($this->matrix_table);

		$RecordObj_matrix->set_dato($dato);
	
		# Si no hay id definido para el componente, lo calcularemos en base al resto de variables ($tipo, $parent,$lang)
		if(!$id) {

			# Trying calculate id
			$id = self::get_id_by_tipo_parent($tipo, $parent, $lang);

			if(!$id) {
				$RecordObj_matrix->set_parent($parent);
				$RecordObj_matrix->set_tipo($tipo);
				$RecordObj_matrix->set_lang($lang);
			}else{
				$this->id = $id;
			}
		}
		#dump($RecordObj_matrix,'$RecordObj_matrix');

		
		$saved 		= $RecordObj_matrix->Save();			
		$this->id 	= $RecordObj_matrix->get_ID();

		# Get returned time_machine id on save
		$time_machine_last_id = $RecordObj_matrix->get_time_machine_last_id();
			#dump($time_machine_last_id,'$time_machine_last_id');

		if (intval($this->id)<1) {
			throw new Exception("Save: received id ($id) not valid!", 1);				
		}		
		
			#dump($RecordObj_matrix,'$RecordObj_matrix',"id:$this->id");

		
		if (is_string($this->get_dato())) {			
			# Check encoding strict
			$detected_encoding = mb_detect_encoding($this->get_dato(), 'UTF-8', true); 	
				#dump($detected_encoding,'$detected_encoding post-save');
			if ($detected_encoding==false) {
				trigger_error("Dato encoding is incorrect [$detected_encoding]. Must be UTF-8");
			}
		}

		

		# Prevent infinite loop saving self
		if (!in_array($tipo, logger_backend_activity::$ar_elements_activity_tipo)) {

			# Siempre y cuando el tipo a salvar no sea de un elemento de 'logger_backend_activity', calculamos los proyectos de su sección
			# Esto permitirá filtrar la actividad por proyectos autorixados al usuario que consulta
			try {
				$projects = filter::get_section_projects($this->id, $this->tipo, $this->parent);
					#dump($projects, "projects for vars: id:$this->id, tipo:$this->tipo, parent:$this->parent"); #$projects = NULL;
				
				# LOGGER ACTIVITY : QUE(action normalized like 'LOAD EDIT'), LOG LEVEL(default 'logger::INFO'), TIPO(like 'dd120'), DATOS(array of related info)	
				logger::$obj['activity']->log_message(
					'SAVE',
					logger::INFO,
					$this->tipo,
					$projects,
					array("msg"=>"Saved ".get_called_class()." id:$this->id, tipo:$this->tipo, parent:$this->parent, lang:$this->lang, table:$this->matrix_table, tm_id:$time_machine_last_id")
				);

			} catch (Exception $e) {
			    if(SHOW_DEBUG) {
			    	$msg = 'Exception: ' . $e->getMessage();
			    	trigger_error($msg);
			    }
			}#end try catch
		}#end if (!in_array($tipo, logger_backend_activity::$ar_elements_activity_tipo))


		# RETURN MATRIX ID
		return $this->id ;

	}#end Save

	
	

	
	
	
	



	# LOAD COMPONENT STATIC VERSION ####################################################################################
	
	/**
	* LOAD ONE COMPONENT BY ID OR TIPO
	*
	*/
	public static function load_component($current_id=NULL, $tipo, $modo='edit', $parent=NULL, $lang=NULL, $matrix_table='matrix') {

		if(empty($current_id) && empty($tipo)) throw new Exception("Error on load_component. Few vars to load component", 1);		

		# If tipo is empty, calculate tipo from id
		if ( $current_id>0 && empty($tipo) ) {
			$RecordObj_matrix	= new RecordObj_matrix($current_id);
			$RecordObj_matrix->set_matrix_table($matrix_table);
			$tipo 				= $RecordObj_matrix->get_tipo();
				#dump($tipo,'$tipo'); #die("55");	
		}	
		
		# Creamos un nuevo objeto de estructura (tesauro)
		$RecordObj_ts		= new RecordObj_ts($tipo);
		
		# Obtenemos su modeloID para identificar el tipo del componente
		$modeloID			= $RecordObj_ts->get_modelo();
		
		# Verify modelo
		if(empty($modeloID)) {
			throw new Exception("-> Invalid modeloID ($modeloID) from id: $current_id , tipo: $tipo", 1);			
		}
		
		# Despejamos el nombre del modelo que será el tipo del componente (ej. 'component_input_text') y es también el nombre de la clase del mismo		
		$clase_name			= $RecordObj_ts->get_modelo_name();		#dump($clase_name,'$clase_name');

		#dump($lang,'lang recibido en load_component');

		# LANG NULL . Lang default DEDALO_DATA_LANG if not defined
		$traducible 		= $RecordObj_ts->get_traducible();
		# Asignación por defecto
		if (empty($lang)) {			
			if ($traducible=='no') {
				$lang = DEDALO_DATA_NOLAN;
			}else{
				$lang = DEDALO_DATA_LANG;
			}			
		}else{
			# Verificación lang recibido
			if ($traducible=='no' && $lang!=DEDALO_DATA_NOLAN) {
				$msg = "Inconsistency detected: lang:$lang is not the expected lang:".DEDALO_DATA_NOLAN." ";				
				if(SHOW_DEBUG===true) {
					$msg .= "<br> for $clase_name $tipo and id:$current_id and traducible:$traducible ";					
				}
				#trigger_error($msg);
				throw new Exception($msg, 1);
				
			}
		}
		

		
		# COMPONENT . CREATE COMPONENT OBJ BY CLASS NAME
		# var_dump( is_callable($clase_name, true, $component) );				
		$component			= new $clase_name($current_id, $tipo, $modo, $parent, $lang);		#($id=NULL, $tipo=false, $modo='edit', $parent=NULL, $lang=NULL)			
			#dump($component,'component',"creado component con id:$current_id, tipo:$tipo, modo:$modo, parent:$parent");
		
		
		return $component ;
	}
	
	
	

	
	

	
}
?>