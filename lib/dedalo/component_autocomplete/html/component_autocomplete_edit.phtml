<?php

	# VISUALIZADOR HTML

	# ELEMENTOS

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'in', $modo, $lang);
	
	$component_alias_css = isset($propiedades->alias_component_tipo) ? ' alias_'.$propiedades->alias_component_tipo : '';

	print '<div class="wrap_component css_wrap_autocomplete wrap_component_'.$modo.' wrap_component_'.$tipo. $component_alias_css.'" ';
	print "id=\"{$id_wrapper}\" ";
	print "data-tipo=\"{$tipo}\" ";
	print "data-lang=\"{$lang}\" ";
	print "data-parent=\"{$parent}\" ";
	print "data-section_tipo=\"{$section_tipo}\" ";
	print "data-modo=\"{$modo}\" ";
	print "data-dato='{$dato_json}' ";
	print "data-component_name=\"{$component_name}\" ";
	print "data-component_info='{$component_info}' ";
	print "data-ar_target_section_tipo='{$ar_target_section_tipo_json}' ";
	print "data-tipo_to_search='{$tipo_to_search}' ";	
	print "data-from_modo=\"{$from_modo}\" ";	
	
	print 'data-search_query_object=\''.$json_search_query_object.'\' ';
	print "data-filter_by_list='{$json_filter_by_list}' ";
	print "data-divisor=\"$divisor\" ";
	print "data-limit=\"$limit\" ";
	print ">";

	# ETIQUETA (LABEL)
	$html_label = component_common_draw::draw_label($this);

	# CONTENIDO (INPUT)
	$html_content = '';
	switch(true) {

		case ($permissions === 0) :
				$html_content .= "";
				break;

		case ($permissions === 1) : 
				$html_content .= $valor;
				break;

		case ($permissions>=2) :

				#
				# CHANGE_MODE_COMPONENT
					if($from_modo!=='edit' && $from_modo!=='tool_description'){
						$html_content .= "<div class=\"css_autocomplete_button_close\" onclick=\"component_common.change_mode_component(this, 'edit', '$from_modo')\"></div>";
					}
					if($modo!=='edit' || $from_modo!=='edit'){
						$css_autocomplete_valor				= 'css_autocomplete_valor_edit_in_list';
						$css_component_options_container 	= 'component_options_container_edit_in_list';
						$css_autocomplete_wrapper 			= 'autocomplete_wrapper_edit_list';
						$html_label 	 					= '';
					}else{
						$css_autocomplete_valor				= '';
						$css_component_options_container 	= 'component_options_container';
						$css_autocomplete_wrapper 			= '';
					}

				#
				# OPTIONS 
					$autosearch_options_html = '';
					$autosearch_options_id 	 = 'autosearch_options_' . $section_tipo .'_'. $tipo;
					$autosearch_options_html .= '<div id="' . $autosearch_options_id . '" class="autosearch_options hide" data-tipo="'.$tipo.'">';
		
						#
						# FILTER_BY_LIST
							if ($filter_by_list!==false) {
								// Calculate ar elements to show in filter
									$ar_elements = component_relation_common::get_filter_list_data($filter_by_list);

								$filter_list_options = new stdClass();
									$filter_list_options->target_id 	= $autosearch_options_id;
									$filter_list_options->tipo 			= $tipo;
									$filter_list_options->section_tipo 	= $section_tipo;
									$filter_list_options->ar_elements 	= $ar_elements;

								$autosearch_options_html .= '<script>';
								$autosearch_options_html .= 'service_autocomplete.build_filter_list('.json_encode($filter_list_options).');';
								$autosearch_options_html .= '</script>';
							}//end if ($filter_by_list!==false)


						#
						# FILTER FIELDS (ADVANCED SEARCH)
							$ar_filters  = [];
							$filter_by_fields = false;
							$filter_obj = $search_query_object->filter;

								// Calculate ar elements to show in filter
								$ar_elements = component_relation_common::get_filter_fields_data($search_query_object, $propiedades);								

								$filter_fields_options = new stdClass();
									$filter_fields_options->tipo 		 = $tipo;
									$filter_fields_options->section_tipo = $section_tipo;
									$filter_fields_options->ar_elements  = $ar_elements;
									$filter_fields_options->op_label_or  = RecordObj_dd::get_termino_by_tipo('dd1061',DEDALO_DATA_LANG,true);
									$filter_fields_options->op_label_and = RecordObj_dd::get_termino_by_tipo('dd1060',DEDALO_DATA_LANG,true);
									$filter_fields_options->operator  	 = isset($propiedades->source->operator) ? $propiedades->source->operator : 'or';
									$filter_fields_options->q_split  	 = isset($propiedades->source->q_split) ? (bool)$propiedades->source->q_split : true;
									$filter_fields_options->target_id 	 = $autosearch_options_id;

								$autosearch_options_html .= '<script>';
								$autosearch_options_html .= 'service_autocomplete.build_filter_fields('.json_encode($filter_fields_options).');';
								$autosearch_options_html .= '</script>';

							/*
							$autosearch_options_html .= "<div class=\"filter_fields text_unselectable\">";
							$autosearch_options_html .= "<ul>";

							foreach ($filter_obj as $operator => $ar_filter) foreach ($ar_filter as $key => $current_filter) {

								$first_path 			= reset($current_filter->path);
								$last_path 				= end($current_filter->path);
								$base_component_tipo 	= $first_path->component_tipo;
								$current_component_tipo = $last_path->component_tipo;
								$current_section_tipo 	= $last_path->section_tipo;
								$current_modelo_name 	= $last_path->modelo;
								$input_name 			= 'filter_field_'.$current_component_tipo;
								$name 					= $last_path->name;

								if (in_array($base_component_tipo, $ar_filters)) continue;

								# type_map
								if (isset($propiedades->source->type_map->$base_component_tipo)) {
									$current_type_map = $propiedades->source->type_map->$base_component_tipo;
									$current_type_map_json = json_encode($current_type_map);
								}else{
									$current_type_map_json = '[]';
								}							
								
								
								$autosearch_options_html .= "<li>";
								# Label
								$autosearch_options_html .= "<label class=\"css_label label\">$name</label>";
								# Input
								$autosearch_options_html .= "<input type=\"text\" class=\"filter_fields_input\" ";
								$autosearch_options_html .= "autocomplete='off'";
								$autosearch_options_html .= 'onkeyup="component_autocomplete.search_from_filter_fields(this)" ';
								$autosearch_options_html .= "name=\"{$input_name}\" ";
								$autosearch_options_html .= 'value="" ';
								if (SHOW_DEVELOPER===true) {
								$autosearch_options_html .= 'placeholder="'.$current_component_tipo.'" ';
								}							
								$autosearch_options_html .= "data-tipo=\"{$current_component_tipo}\" ";
								$autosearch_options_html .= "data-modelo=\"{$current_modelo_name}\" ";
								$autosearch_options_html .= "data-type_map='$current_type_map_json'";
								$autosearch_options_html .= "/>";
								
								// Mode full component search							
								#$current_component  = component_common::get_instance($current_modelo_name,
								#													 $current_component_tipo,
								#													 null,
								#													 'search',
								#													 DEDALO_DATA_LANG,
								#													 $current_section_tipo);
								#$autosearch_options_html .= $current_component->get_html();						
								$autosearch_options_html .= "</li>";
								

								if($key>0) $filter_by_fields = true;
							}
							$autosearch_options_html .= "</ul>";

							# Operator selector
								$autosearch_options_html .= "<div class=\"search_operators_div\">";
								$operator_selected = isset($propiedades->source->operator) ? $propiedades->source->operator : 'or';						
								$autosearch_options_html .= "<label>" .label::get_label('operadores_de_busqueda'). "</label> ";
								$autosearch_options_html .= "<select class=\"operator_selector\" onchange=\"component_autocomplete.search_from_filter_fields(this)\">";
								$op_label = RecordObj_dd::get_termino_by_tipo('dd1061',DEDALO_DATA_LANG,true);
								$selected = ($operator_selected==='or') ? 'selected="selected"' : '';						
								$autosearch_options_html .= "<option value='or' {$selected}>" .$op_label. "</option>";
								$op_label = RecordObj_dd::get_termino_by_tipo('dd1060',DEDALO_DATA_LANG,true);		
								$selected = ($operator_selected==='and') ? 'selected="selected"' : '';	
								$autosearch_options_html .= "<option value='and' {$selected}>" .$op_label. "</option>";
								$autosearch_options_html .= "</select>";
								$autosearch_options_html .= "</div>";

							# Split selector
								$autosearch_options_html .= "<div class=\"search_operators_div\">";							
								$operator_selected = isset($propiedades->source->q_split) ? (bool)$propiedades->source->q_split : true;
								$autosearch_options_html .= "<label>" .label::get_label('dividir_palabras'). "</label> ";
								$autosearch_options_html .= "<select class=\"split_selector\" onchange=\"component_autocomplete.search_from_filter_fields(this)\">";
								#$split_label = RecordObj_dd::get_termino_by_tipo('dd618',DEDALO_DATA_LANG,true);
								$split_label = label::get_label('si');
								$selected = ($operator_selected===true) ? 'selected="selected"' : '';
								$autosearch_options_html .= "<option value='true' {$selected}>" .$split_label. "</option>";
								#$split_label = RecordObj_dd::get_termino_by_tipo('dd619',DEDALO_DATA_LANG,true);
								$split_label = label::get_label('no');	
								$selected = ($operator_selected===false) ? 'selected="selected"' : '';
								$autosearch_options_html .= "<option value='false' {$selected}>" .$split_label. "</option>";
								$autosearch_options_html .= "</select>";
								$autosearch_options_html .= "</div>";
							
							$autosearch_options_html .= "</div>";//end div filter_fields
							*/

					$autosearch_options_html .= "</div>";//end autosearch_options	
					

				#
				# VALOR. STRING RESOLVED TO SHOW
					$html_content .= '<ul class="css_autocomplete_valor '.$css_autocomplete_valor.'" data-role="autocomplete_valor">';
					$i=0;
					foreach ($ar_valor as $value_obj) {


						$current_locator  		= $value_obj->value;
						$current_section_id 	= $current_locator->section_id;
						$current_section_tipo 	= $current_locator->section_tipo;
						$current_value 			= $value_obj->label;
						$current_locator_json 	= json_encode($current_locator);

						# Permissions of target section. Apply to current buttons
						$open_section_tipo_permissions = common::get_permissions($current_section_tipo,$current_section_tipo);						

						$html_content .= '<li>';

						#
						# BTN DELETE
							if (!$in_time_machine) {
							$html_content .= "<div class=\"icon_bs link css_autocomplete_button_delete edit_hidden\" ";
							$html_content .= "onclick=\"component_autocomplete.delete(this)\" ";
							$html_content .= "title=\"$label $parent\" ";			
							$html_content .= "data-current_value='{$current_locator_json}' ";
							$html_content .= "data-role=\"autocomplete_button_delete\" ";
							$html_content .= "></div>";
							}

						#
						# VALUE
							$html_content .= '<span>'.$current_value.'</span>';


						#
						# BTN EDIT
							if (!$in_time_machine && $open_section_tipo_permissions>=2) {
							#$html_content .= "<a href=\"javascript:;\" class=\"icon_bs link edit_autocomplete edit_autocomplete_row edit_hidden\" ";
							$html_content .= "<div class=\"icon_bs link edit_autocomplete edit_autocomplete_row edit_hidden\" ";
							$html_content .= "onclick=\"component_autocomplete.open_element(this)\" ";
							$html_content .= "data-section_tipo=\"$current_section_tipo\" ";
							$html_content .= "data-section_id=\"$current_section_id\" ";
							$html_content .= "data-modo=\"edit\" ";
							$html_content .= "data-menu=\"0\" ";
							#$html_content .= "></a>";
							$html_content .= "></div>";
							}


						#
						# DATAFRAME MANAGER
						if (isset($ar_dataframe_obj[$i])) {
							$html_content .= $ar_dataframe_obj[$i]->get_html();
						}
						$i++;


						#
						# SEMANTICS
						# Mandatory vars to create semantic_node column
						if(!empty($this->semantic_nodes)) {
							$html_content .= "<div class=\"autocomplete_semantic_nodes\">";
							foreach ((array)$this->semantic_nodes as $semantic_node_tipo) {
							
								$semantic_node_title = RecordObj_dd::get_termino_by_tipo($semantic_node_tipo);

								$ds_key 			 = $semantic_node_tipo;
								$semantic_wrapper_id = $ds_key.'_'.$current_locator->section_tipo.'_'.$current_locator->section_id;
								$ds_element 		 = isset($current_locator->ds->$ds_key) ? $current_locator->ds->$ds_key : null;
								
								ob_start();
								include(DEDALO_LIB_BASE_PATH . '/tools/tool_semantic_nodes/html/tool_semantic_nodes_node.phtml');
								$html_content .= ob_get_clean();
								
							}
							$html_content .= "</div>";
						}


						$html_content .= '</li>';
					}
					$html_content .= '</ul>';


				#
				# BUTTONS_AND_FIELDS
					if ($in_time_machine!==true) {
						
						# BUTTONS_AND_FIELDS
						$html_content .= '<div class="buttons_and_fields">';

							#$url_edit = "?t=".reset($ar_target_section_tipo).'&menu=0';	// To first section only  onclick=\"window.open('$url_edit')\"
							$open_section_tipo = reset($ar_target_section_tipo);
							
							# BUTTON SHOW OPTIONS
							if ($filter_by_list!==false || $filter_by_fields!==false) {
								$html_content .= "<div class=\"icon_bs autocomplete_list_button_options edit_hidden\" data-tipo=\"$tipo\" onclick=\"service_autocomplete.toggle_options(this)\"></div>";
							}
							
							# Permissions of target section. Apply to current buttons
							$open_section_tipo_permissions = common::get_permissions($open_section_tipo,$open_section_tipo);
							if ($open_section_tipo_permissions>=2) {

								#
								# BTN NEW ELEMENT
								$html_content .= "<div class=\"icon_bs link new_autocomplete edit_hidden\" ";
								$html_content .= "onclick=\"component_autocomplete.new_element(this,'$id_wrapper')\" ";
								$html_content .= "data-target_section_tipo=\"".reset($ar_target_section_tipo)."\" ";							
								$html_content .= "></div>";

								#
								# BTN EDIT WHOLE SECTION
								$open_section_id   = null;
								$html_content .= "<a href=\"javascript:;\" class=\"icon_bs link edit_hidden edit_autocomplete\" onclick=\"component_autocomplete.open_element(this)\" ";
								$html_content .= "data-section_tipo=\"$open_section_tipo\" ";
								$html_content .= "data-section_id=\"$open_section_id\" ";
								$html_content .= "data-modo=\"list\" ";
								$html_content .= "data-menu=\"1\" ";
								$html_content .= "></a>";

							}

						$html_content .= '</div>';//end div buttons_and_fields
					}//end if (!$in_time_machine) {


				#
				# BUTTON SHOW OPTIONS
					#	if ($filter_by_list!==false || $filter_by_fields!==false) {
					#		$html_content .= "<div class=\"icon_bs autocomplete_list_button_options edit_hidden\" data-tipo=\"$tipo\" onclick=\"component_autocomplete.toggle_options(this)\"></div>";
					#	}

				
				#
				# INPUT DATA HIDDEN
					$html_content .= "<input type=\"text\" class=\"css_autocomplete_dato_hidden debug_info\" ";
					$html_content .= "name=\"{$input_name}\" ";
					$html_content .= "value='{$dato_json}' ";
					$html_content .= "data-role=\"dato_hidden\" ";
					$html_content .= "data-tipo=\"{$tipo}\" "; // Important for discriminate autocomplete inside autocomplete
					#$html_content .= "data-limit=\"$limit\" ";
					$html_content .= "disabled=\"disabled\" ";
					$html_content .= "/>";
					// data-filter_by_list_component_tipo=\"$filter_by_list_component_tipo\"


				#
				# COMPONENT OPTIONS CONTAINER
					$html_content .= '<div class="'.$css_component_options_container.'">';
						#
						# NEW_ELEMENT_CONTAINER ajax loads here
							$html_content .= "<div class=\"new_element_container\" data-role=\"new_element_container\" data-tipo=\"{$tipo}\"></div>";

						#
						# AUTOSEARCH_OPTIONS (add after button)
							$html_content .= $autosearch_options_html;

						#
						# AUTOCOMPLETE SERVICE
							$autocomplete_wrapper_id = 'aw_' . $identificador_unico;
							$html_content .= '<div class="autocomplete_wrapper '.$css_autocomplete_wrapper.'" id="'.$autocomplete_wrapper_id.'"></div>';
					$html_content .= '</div>';


				#
				# JS Init component
					$html_content .= '<script>';
					# Init component
					$init_options = new stdClass();
						$init_options->component_name 	= $component_name;
						$init_options->wrapper_id 		= $id_wrapper;
						$init_options->cookie_name 		= isset($cookie_name) ? $cookie_name : null;
						$init_options->limit 			= $limit;
						$init_options->uid 				= $identificador_unico;
					$html_content .= 'component_common.init('.json_encode($init_options).');';
					$html_content .= '</script>';


				#######


				if(SHOW_DEBUG) {
					#$html_content .= " <span class=\"css_span_debugger\" id=\"debugger_{$tipo}\" >{$debugger}</span>";
					$html_content .= "<span class=\"debug_info\" id=\"debugger_{$tipo}\">";
					#$html_content .= json_encode($search_fields, JSON_PRETTY_PRINT);
					$html_content .= "<pre>";					
					$json_indented_by_2 = preg_replace('/^(  +?)\\1(?=[^ ])/m', '$1', json_encode($search_query_object, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
					$html_content .= $json_indented_by_2;
					$html_content .= "</pre>";
					$html_content .= "</span>";
				}
				break;
	}

	# Prepare content to show in page
	tools::prepare_content($html_content);


	# PRINT HTML
	print $html_label;
	print $html_content;

	#if(SHOW_DEBUG) {
	#	if (isset($this->ar_list_of_values->debug)) {
	#		echo $this->ar_list_of_values->debug;
	#	}
	#}

	print "</div>"; //wrap

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'out', $modo, $lang);


