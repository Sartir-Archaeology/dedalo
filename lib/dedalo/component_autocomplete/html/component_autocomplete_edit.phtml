<?php

	# VISUALIZADOR HTML

	# ELEMENTOS

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'in', $modo, $lang);

	print "<div class=\"wrap_component css_wrap_autocomplete wrap_component_{$tipo}\" id=\"{$id_wrapper}\" ";
	print "data-tipo=\"{$tipo}\" ";
	print "data-lang=\"{$lang}\" ";
	print "data-parent=\"{$parent}\" ";
	print "data-section_tipo=\"{$section_tipo}\" ";
	print "data-ar_target_section_tipo='{$ar_target_section_tipo_json}' ";
	print "data-tipo_to_search='{$tipo_to_search}' ";
	print "data-modo=\"{$modo}\" ";
	print "data-from_modo=\"{$from_modo}\" ";
	print "data-dato='{$dato_json}' ";
	print "data-component_name=\"{$component_name}\" ";
	print "data-component_info='{$component_info}' ";
	print ">";

	# ETIQUETA (LABEL)
	$html_label = component_common_draw::draw_label($this);

	# CONTENIDO (INPUT)
	$html_content = '';
	switch(true) {

		case ($permissions == 0) :
				$html_content .= "";
				break;

		case ($permissions == 1) : 
				$html_content .= $valor;
				break;

		case ($permissions>=2) :

				if($from_modo !== 'edit'){
					$html_content .= "<div class=\"css_autocomplete_button_close\" onclick=\"component_common.change_mode_component(this, 'edit', '$from_modo')\"></div>";
				}


				if ($in_time_machine!==true) {

					#
					# NEW_ELEMENT_CONTAINER ajax loads here
					$html_content .= "<div class=\"new_element_container\" data-type=\"new_element_container\"></div>";
						if(SHOW_DEBUG===true) {
							/*
							$html_content .= "<div class=\"debug_info notes\">target_section_tipo: ".implode(', ', $ar_target_section_tipo)."</div>";
							if (isset($propiedades->filtered_by)) {
								$html_content .= "<div class=\"debug_info notes\">filtered_by: ".json_encode($propiedades->filtered_by)."</div>";	// filtered_by
							}
							$html_content .= "<div class=\"debug_info notes\">".str_replace('},', '},<br>', $dato_json) ."</div>";
							*/
						}

					
					# BUTTONS_AND_FIELDS
					$html_content .= "<div class=\"buttons_and_fields\">";

						#$url_edit = "?t=".reset($ar_target_section_tipo).'&menu=0';	// To first section only  onclick=\"window.open('$url_edit')\"
						$open_section_tipo = reset($ar_target_section_tipo);

						# Permissions of target section. Apply to current buttons
						$open_section_tipo_permissions = common::get_permissions($open_section_tipo,$open_section_tipo);
						if ($open_section_tipo_permissions>=2) {
							
							#
							# BTN EDIT WHOLE SECTION
							$open_section_id   = null;
							$html_content .= "<a href=\"javascript:;\" class=\"icon_bs link edit_hidden edit_autocomplete\" onclick=\"component_autocomplete.open_element(this)\" ";
							$html_content .= "data-section_tipo=\"$open_section_tipo\" ";
							$html_content .= "data-section_id=\"$open_section_id\" ";
							$html_content .= "data-modo=\"list\" ";
							$html_content .= "data-menu=\"1\" ";
							$html_content .= "></a>";

							#
							# BTN NEW ELEMENT
							$html_content .= "<div class=\"icon_bs link new_autocomplete edit_hidden\" ";
							$html_content .= "onclick=\"component_autocomplete.new_element(this,'$id_wrapper')\" ";
							$html_content .= "data-target_section_tipo=\"".reset($ar_target_section_tipo)."\" ";							
							$html_content .= "></div>";
						}

						#
						# INPUT SEARCH FIELD
						$html_content .= "<input type=\"text\" class=\"css_autocomplete_search_field edit_hidden\" placeholder=\"".label::get_label('buscar')."...\" ";
						$html_content .= "data-id_wrapper=\"$id_wrapper\" ";
						$html_content .= "data-tipo='{$tipo}' ";
						$html_content .= "data-section_tipo=\"{$section_tipo}\" ";
						$html_content .= "data-parent='{$parent}' ";
						$html_content .= "data-ar_target_section_tipo='{$ar_target_section_tipo_json}' ";
						$html_content .= "data-tipo_to_search='{$tipo_to_search}' ";
						$html_content .= "onfocus=\"component_autocomplete.activate(this)\" ";
						$html_content .= "tabindex=\"1\" ";
						$html_content .= "/>";

					$html_content .= "</div>";//end div buttons_and_fields



				}//end if (!$in_time_machine) {


				# VALOR . STRING RESOLVED TO SHOW
				$html_content .= "<ul class=\"css_autocomplete_valor\" data-role=\"autocomplete_valor\">";
				foreach ($ar_valor as $current_value => $value) {

					$current_locator  		= json_decode($current_value);
					$current_section_id 	= $current_locator->section_id;
					$current_section_tipo 	= $current_locator->section_tipo;

					# Permissions of target section. Apply to current buttons
					$open_section_tipo_permissions = common::get_permissions($current_section_tipo,$current_section_tipo);						

					$html_content .= "<li>";

					#
					# BTN DELETE
					if (!$in_time_machine) {							
					$html_content .= "<div class=\"icon_bs link css_autocomplete_button_delete edit_hidden\" ";
					$html_content .= "onclick=\"component_autocomplete.delete(this)\" ";
					$html_content .= "title=\"$label $parent\" ";
					$html_content .= "data-tipo=\"{$tipo}\" ";
					$html_content .= "data-current_value='$current_value' ";
					$html_content .= "data-id_wrapper=\"$id_wrapper\" ";
					$html_content .= "data-role=\"autocomplete_button_delete\" ";										
					$html_content .= "></div>";						
					}

					#
					# LABEL
					$html_content .= "<span>$value</span>";

					#
					# BTN EDIT
					if (!$in_time_machine && $open_section_tipo_permissions>=2) {
					$html_content .= "<a href=\"javascript:;\" class=\"icon_bs link edit_autocomplete edit_autocomplete_row edit_hidden\" ";
					$html_content .= "onclick=\"component_autocomplete.open_element(this)\" ";
					$html_content .= "data-section_tipo=\"$current_section_tipo\" ";
					$html_content .= "data-section_id=\"$current_section_id\" ";
					$html_content .= "data-modo=\"edit\" ";
					$html_content .= "data-menu=\"0\" ";
					$html_content .= "></a>";						
					}


					#
					# SEMANTICS
					# Mandatory vars to create semantic_node column
					if(!empty($this->semantic_nodes)) {
						$html_content .= "<div class=\"autocomplete_semantic_nodes\">";
						foreach ((array)$this->semantic_nodes as $semantic_node_tipo) {
						
							$semantic_node_title = RecordObj_dd::get_termino_by_tipo($semantic_node_tipo);

							$ds_key 			 = $semantic_node_tipo;
							$semantic_wrapper_id = $ds_key.'_'.$current_locator->section_tipo.'_'.$current_locator->section_id;
							$ds_element 		 = isset($current_locator->ds->$ds_key) ? $current_locator->ds->$ds_key : null;
							
							ob_start();
							include(DEDALO_LIB_BASE_PATH . '/tools/tool_semantic_nodes/html/tool_semantic_nodes_node.phtml');
							$html_content .= ob_get_clean();
							
						}
						$html_content .= "</div>";
					}
					

					if(SHOW_DEBUG) {
						#$html_content .= " <span class=\"notes\">$current_value</span>";
					}

					$html_content .= "</li>";
				}
				$html_content .= "</ul>";


				#
				# OPTIONS (filter_by_list)
				#$filter_by_list= false;
				if ($filter_by_list!==false) {
					$html_content .= "<div class=\"icon_bs autocomplete_list_button_options edit_hidden\"></div>";

					$cookie_name = 'filter_by_list_'. $section_tipo .'_'. $tipo;
					$html_content .= "<ul class=\"filter_by_list text_unselectable\">";
					#$html_content .= "<div class=\"toponymy_list_close\">X</div>";
					$html_content .= "<li><input type=\"checkbox\" id=\"select_all_{$tipo}\" onchange=\"component_autocomplete.select_all_filter_sections(this,'$cookie_name')\"/><label for=\"select_all_{$tipo}\">".label::get_label('todos')."</label></li><hr>";
					$total = count($filter_by_list); $n=0;
					foreach ($filter_by_list as $current_obj_value) {

						$f_section_tipo   	= $current_obj_value->section_tipo;
						$f_component_tipo 	= $current_obj_value->component_tipo;

						# Calculate list values of each element
						$c_modelo_name 		= RecordObj_dd::get_modelo_name_by_tipo($f_component_tipo,true);
						$current_component  = component_common::get_instance($c_modelo_name,
																			 $f_component_tipo,
																			 null,
																			 'list',
																			 DEDALO_DATA_LANG,
																			 $f_section_tipo);
						$ar_list_of_values = $current_component->get_ar_list_of_values(DEDALO_DATA_LANG, false, false, false, $value_container='valor');
							#dump($ar_list_of_values, ' ar_list_of_values ++ '.to_string());
						foreach ((array)$ar_list_of_values->result as $hs_value => $hs_name) {
							
							$current_value = json_decode($hs_value);
							# Add component tipo to locator
							$current_value->component_tipo = $f_component_tipo;							

							$input_id = md5($hs_value);
							$html_content .= "<li>";
							$html_content .= "<input type=\"checkbox\" value='".json_encode($current_value)."' id=\"$input_id\" checked onchange=\"component_autocomplete.save_filter_sections(this,'$cookie_name')\"/>";
							$html_content .= "<label for=\"$input_id\">";
							$html_content .= $hs_name;
							if(SHOW_DEBUG===true) {
								#$html_content .= " <span class=\"notes\">[$hs_value]<span>";
							}
							$html_content .= "</label>";
							$html_content .= "</li>";
						}
						$n++;
						if ($total>1 && $n<$total) {
							$html_content .= "<hr>";
						}
					}
					$html_content .= "</ul>";

					$html_content .= "<script>";
					# Reset var 'activated' on load
					#$html_content .= "component_autocomplete.activated={};";
					# Init component
					$html_content .= "component_autocomplete.init({\"wrapper_id\":\"$id_wrapper\",\"cookie_name\":\"$cookie_name\",\"limit\":\"$limit\"});";
					$html_content .= "</script>";
				}//end if ($filter_by_list!==false)


				#
				# INPUT DATA HIDDEN
				$html_content .= "<input type=\"text\" class=\"css_autocomplete_dato_hidden debug_info\" ";
				$html_content .= "name=\"{$input_name}\" ";
				$html_content .= "data-type=\"autocomplete_dato_hidden\" ";
				$html_content .= "data-role=\"autocomplete_dato_hidden\" ";
				$html_content .= "data-tipo=\"{$tipo}\" ";
				$html_content .= "data-section_tipo=\"{$section_tipo}\" ";
				$html_content .= "data-parent=\"{$parent}\" ";
				$html_content .= "data-lang=\"{$lang}\" ";
				$html_content .= "data-ar_target_section_tipo='{$ar_target_section_tipo_json}' ";
				$html_content .= "data-search_fields='{$search_fields_json}' ";
				$html_content .= "data-dato_in_db='{$dato_json}' ";
				$html_content .= "data-id_wrapper=\"$id_wrapper\" ";
				$html_content .= "data-limit=\"$limit\" ";
				$html_content .= "data-divisor=\"$divisor\" ";
				$html_content .= "value='{$dato_json}' ";
				$html_content .= "title='' ";
				$html_content .= "disabled=\"disabled\" ";
				$html_content .= "/>";
					// data-filter_by_list_component_tipo=\"$filter_by_list_component_tipo\"

				if(SHOW_DEBUG) {
					#$html_content .= " <span class=\"css_span_debugger\" id=\"debugger_{$tipo}\" >{$debugger}</span>";
					$html_content .= "<span class=\"debug_info\" id=\"debugger_{$tipo}\">".json_encode($search_fields, JSON_PRETTY_PRINT)."</span>";
				}
				break;
	}

	# Prepare content to show in page
	tools::prepare_content($html_content);


	# PRINT HTML
	print $html_label;
	print $html_content;

	if(SHOW_DEBUG) {
		if (isset($this->ar_list_of_values->debug)) {
			echo $this->ar_list_of_values->debug;
		}
	}

	print "</div>"; //wrap

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'out', $modo, $lang);


?>