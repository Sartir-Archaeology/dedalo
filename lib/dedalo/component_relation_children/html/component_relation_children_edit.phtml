<?php

	# VISUALIZADOR HTML

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'in');

	print "<div class=\"wrap_component css_wrap_relation_children wrap_component_{$modo} wrap_component_{$tipo}\" id=\"{$id_wrapper}\" ";
	print "data-tipo=\"{$tipo}\" ";
	print "data-lang=\"{$lang}\" ";
	print "data-parent=\"{$parent}\" ";
	print "data-section_tipo=\"{$section_tipo}\" ";
	print "data-modo=\"{$modo}\" ";
	print "data-component_name=\"{$component_name}\" ";
	print "data-component_info='{$component_info}' ";
	print "data-hierarchy_sections='".json_encode($hierarchy_sections)."' ";  // Default hierarchy_sections
	print "data-relation_type=\"{$relation_type}\" ";
	print "data-search_tipos='".json_encode($search_tipos)."' ";
	print 'data-search_query_object=\''.$json_search_query_object.'\' ';
	print "data-limit=\"$limit\" ";
	print ">";

	# ETIQUETA (LABEL)
	$html_label = component_common_draw::draw_label($this);

	# CONTENIDO (INPUT)
	$html_content = '';
	switch($permissions) {

		case 0 :
			$html_content .= "";
			break;

		case 1 :
			$html_content .= $this->valor;
			break;


		case 2 :
		case 3 :
			

			$html_content .= "<div class=\"wrap_relation_children_values\">";

				# ADD BUTTON			
				$html_content .= "<div class=\"button_add relation_children_add_button\" ";
				$html_content .= "data-target_section_tipo=\"$target_section_tipo\" ";
				$html_content .= "onclick=\"component_relation_children.open_children_selector_window(this,event)\" ";
				$html_content .= "></div>";
				

				# SOURCE_MODE SWITCH
				$source_mode = 'tree';
				switch ($source_mode) {
					
					case 'tree':
					case 'autocomplete':
					default:

						$hierarchy_types_json 	   = '';
						$hierarchy_sections_json   = json_encode((array)$hierarchy_sections);
						
						# parent_area_is_model
						if (isset($_GET['model']) && $_GET['model']==1) {
							$parent_area_is_model = true;
						}else{
							$parent_area_is_model = false;
						}
						if ($tipo===DEDALO_HIERARCHY_CHIDRENS_MODEL_TIPO) {
							$parent_area_is_model = true; // hierarchy select model children case
						}
						$parent_area_is_model_json 	= json_encode($parent_area_is_model);


						# BTN LINK ELEMENT
						$html_content .= "<div class=\"button_add relation_children_add_from_tree_button\" ";
						$html_content .= "data-id_wrapper=\"$id_wrapper\" ";
						$html_content .= "data-parent_area_is_model='{$parent_area_is_model_json}' ";
						$html_content .= "data-component_name=\"$component_name\" ";
						$html_content .= "data-hierarchy_types='{$hierarchy_types_json}' ";
						$html_content .= "data-hierarchy_sections='{$hierarchy_sections_json}' ";
						$html_content .= "onclick=\"component_common.open_ts_window(this,event)\"></div>";

						
						if(SHOW_DEBUG===true) {
							#$html_content .= "<div class=\"debug_info notes\">ar_referenced_tipo: ".implode(', ', $ar_referenced_tipo)."</div>";
							#$html_content .= "<div class=\"debug_info notes\">".str_replace('},', '},<br>', $dato_json) ."</div>";
						}	

						# Reset var 'activated' on load
						#$html_content .= "<script>component_autocomplete_hi.activated={}</script>";
						break;
				}//end switch ($source_mode)
				

				#
				# TERMS
				$html_content .= '<ul class="css_relation_children_valor">';
				foreach ($ar_values as $item) {

					$current_locator 	  = $item->value;
					$current_locator_json = json_encode($current_locator);

					$html_content .= '<li>';

					# BTN DELETE
					$html_content .= '<div class="icon_bs link css_relation_parent_button_delete" ';
					$html_content .= 'data-current_value=\''.$current_locator_json.'\' ';
					$html_content .= 'onclick="component_relation_children.remove_children(this)">';
					$html_content .= '</div>';

					# VALUE . STRING RESOLVED TO SHOW
					$html_content .= $item->label;
					$html_content .= ' <span class="notes">['.$current_locator->section_tipo.'_'.$current_locator->section_id.']</span>';
					
					$html_content .= '</li>';
				}
				$html_content .= '</ul>';


			$html_content .= "</div>";//end wrap_parent_values


			#
			# COMPONENT_OPTIONS_CONTAINER
			$html_content .= '<div class="component_options_container">';

				#
				# AUTOCOMPLETE SERVICE
				$autocomplete_wrapper_id = 'aw_' . $identificador_unico;
				$html_content .= '<div class="autocomplete_wrapper" id="'.$autocomplete_wrapper_id.'"></div>';


			$html_content .= '</div>';//end component_options_container
			


			#
			# JS Init component
			$html_content .= '<script>';
			$init_options = new stdClass();
				$init_options->component_name 	= $component_name;
				$init_options->uid 				= $identificador_unico;
			$html_content .= "component_common.init(".json_encode($init_options).");";
			$html_content .= '</script>';


			if(SHOW_DEBUG===true) {
				#$html_content .= " <div class=\"debug_info\"> Current val: <strong>$valor</strong></div>";				
				#$html_content .= " <span class=\"css_span_debugger\" id=\"debugger_{$tipo}\">{$debugger}</span>";
				$html_content .= "<span class=\"debug_info\">";
				$html_content .= "<br> locators in section relation (children.tipo: ".$this->relation_type.") : ";
				$html_content .= wrap_pre( to_string($this->get_my_section_relations($this->relation_type)), false );
				$html_content .= "</span>";
			}
			break;
	}

	# Prepare content to show in page
	tools::prepare_content($html_content);


	# PRINT HTML
	print $html_label;
	print $html_content;


	print "</div>"; //wrap

	# html_delimiter
	print component_common_draw::html_delimiter($component_name, $tipo, $parent, $label, 'out');


?>